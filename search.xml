<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度学习</title>
      <link href="/posts/33115a55.html"/>
      <url>/posts/33115a55.html</url>
      
        <content type="html"><![CDATA[<h2 id="多层感知机-MLP"><a href="#多层感知机-MLP" class="headerlink" title="多层感知机(MLP)"></a>多层感知机(MLP)</h2><p><a href="https://blog.csdn.net/fg13821267836/article/details/93405572">本文</a>写的特别好，去看！</p><p>除了输入输出层，它中间可以有多个隐层。</p><p>MLP的双要素：仿射变换+激活函数</p><p>对于一个隐藏层：</p><p>进入：向量X</p><p>输出：f (W1X+b1)，W1是权重，b1是偏置，f是激活函数等。</p><p>为嘛使用激活函数？</p><p>a. 不使用激活函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的线性组合。</p><p>b. 使用激活函数，能够给神经元引入非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以利用到更多的非线性模型中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ReLU函数"><a href="#ReLU函数" class="headerlink" title="ReLU函数"></a>ReLU函数</h2><p>激活函数之一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h2><h2 id="tanh函数"><a href="#tanh函数" class="headerlink" title="tanh函数"></a>tanh函数</h2><h2 id="softmax回归"><a href="#softmax回归" class="headerlink" title="softmax回归"></a>softmax回归</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>南烟斋笔录</title>
      <link href="/posts/8f9509b1.html"/>
      <url>/posts/8f9509b1.html</url>
      
        <content type="html"><![CDATA[<h3 id="2024-9-22"><a href="#2024-9-22" class="headerlink" title="2024.9.22"></a>2024.9.22</h3><p>写完了英语作业、基物实验预习报告、工图作业</p><h3 id="2024-9-23"><a href="#2024-9-23" class="headerlink" title="2024.9.23"></a>2024.9.23</h3><p>写完了复变函数作业、物理作业、</p><p>未完待续：<br>基物实验报告、科研课堂报告、工程力学作业</p><p>信息论<br>softmax<br>交叉熵损失函数<a href="https://blog.csdn.net/chao_shine/article/details/89925762">https://blog.csdn.net/chao_shine/article/details/89925762</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网站的Build &amp; Debug</title>
      <link href="/posts/c794e9da.html"/>
      <url>/posts/c794e9da.html</url>
      
        <content type="html"><![CDATA[<p>用于记录建站以来遇到的bug和完善建造方法。</p><h2 id="Spawn-failed">Spawn failed</h2><p>出现在deploy这一步，99%是网络问题，这时可以重启电脑，打开github仓库里的action，就看着它deploy（这样做可能会使网络通畅一点）</p><p><img src="https://pic.imgdb.cn/item/66efad31f21886ccc03f39f7.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/66efad85f21886ccc03f847d.jpg" alt=""></p><h2 id="hexo常用命令">hexo常用命令</h2><p>hexo c清空仓库</p><p>hexo g更新相关文件</p><p>hexo d打包上传仓库</p><p>hexo s本地运行网站</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>复变函数</title>
      <link href="/posts/1f4e8350.html"/>
      <url>/posts/1f4e8350.html</url>
      
        <content type="html"><![CDATA[<p>复球面：</p><p><img src="https://pic.imgdb.cn/item/66f100a4f21886ccc074bda5.png" alt=""></p><h2 id="解析与可导">解析与可导</h2><p>可导的充要条件：</p><p><img src="https://pic.imgdb.cn/item/66f0e5ddf21886ccc059359f.jpg" alt=""></p><p>解析的充要条件：</p><p><img src="https://pic.imgdb.cn/item/66f0e850f21886ccc05b96c0.jpg" alt=""></p><p>复变函数求导公式：</p><p><img src="https://pic.imgdb.cn/item/66f0e865f21886ccc05baa54.jpg" alt=""></p><p>可导与解析的联系：</p><p><img src="https://pic.imgdb.cn/item/66f0e478f21886ccc057b701.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f0e285f21886ccc0558a4d.png" alt=""></p><p>为常数函数的条件：</p><p><img src="https://pic.imgdb.cn/item/66f0e7b1f21886ccc05afe43.png" alt=""></p><h2 id="初等函数">初等函数</h2><h4 id="指数函数">指数函数</h4><p><img src="https://pic.imgdb.cn/item/66f0d067f21886ccc04046f8.jpg" alt=""></p><p>注意点：</p><p>(1)取模运算：|z|，要写成z=x+iy的形态，|z|=根号x^2+y^2=根号z*z的共轭，不是z平方了再开根号！和实数不同</p><p><img src="https://pic.imgdb.cn/item/66f0d056f21886ccc0403778.jpg" alt=""></p><p>(2)Arg(z)辐角是有2kπ的，辐角主值是没2kπ的</p><p>(3)复数在分母上的化简：有理化</p><p>(4)归一化成函数原来的形式</p><p><img src="https://pic.imgdb.cn/item/66f0ce2df21886ccc03e405d.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f0cfecf21886ccc03fe045.png" alt=""></p><h4 id="对数函数">对数函数</h4><p><img src="https://pic.imgdb.cn/item/66f0d383f21886ccc0434f4f.jpg" alt=""></p><p>注意一下细心就好</p><p><img src="https://pic.imgdb.cn/item/66f0d18bf21886ccc041520c.png" alt=""></p><h4 id="幂函数">幂函数</h4><p><img src="https://pic.imgdb.cn/item/66f0d52ef21886ccc04528c6.jpg" alt=""></p><h4 id="三角函数">三角函数</h4><p><img src="https://pic.imgdb.cn/item/66f0d793f21886ccc0480b19.jpg" alt=""></p><p>二元函数u(x,y)的可微和可导？<br>复数求导法则和实数一样？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文学习</title>
      <link href="/posts/9e5f106.html"/>
      <url>/posts/9e5f106.html</url>
      
        <content type="html"><![CDATA[<p>有需要时下载<a href="https://blog.csdn.net/l903445981/article/details/119960684">zotero</a></p><p><a href="https://www.makeuseof.com/what-is-the-biglittle-architecture/">https://www.makeuseof.com/what-is-the-biglittle-architecture/</a></p><h2 id="Hybrid-LLM-Cost-Efficient-And-Quality-Aware-Query-Routing"><a href="#Hybrid-LLM-Cost-Efficient-And-Quality-Aware-Query-Routing" class="headerlink" title="Hybrid LLM: Cost-Efficient And Quality-Aware Query Routing"></a>Hybrid LLM: Cost-Efficient And Quality-Aware Query Routing</h2><h4 id="LLM-Large-Language-Model大语言模型"><a href="#LLM-Large-Language-Model大语言模型" class="headerlink" title="LLM(Large Language Model大语言模型)"></a>LLM(Large Language Model大语言模型)</h4><p><a href="https://blog.csdn.net/jarodyv/article/details/129992142">开源LLM汇总</a></p><h4 id="云端还是边端？分类"><a href="#云端还是边端？分类" class="headerlink" title="云端还是边端？分类"></a>云端还是边端？分类</h4><p><img src="https://pic.imgdb.cn/item/66d97761d9c307b7e9a05117.png" alt=""></p><h2 id="边缘计算在线资源管理"><a href="#边缘计算在线资源管理" class="headerlink" title="边缘计算在线资源管理"></a>边缘计算在线资源管理</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Deep Reinforcement Learning-Based Online Resource Management for UAV-Assisted Edge Computing With Dual Connectivity</p><p>基于深度强化学习的无人机辅助双连通性边缘计算在线资源管理</p><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>移动边缘计算(MEC)是一种新兴的分布式计算范式，它使云处理和存储能力更接近最终用户(即网络边缘)。该技术已被广泛认为是解决与移动应用程序和物联网(IoT)快速增长相关的挑战的有前途的解决方案。</p><p>为了支持MEC网络的动态快速部署，在无人机上安装MEC服务器近年来受到了业界和学术界的关注。在这种方法中，UAV可以作为飞行基站，通过向地面用户提供额外的计算服务来有效地补充现有的蜂窝网络。由于无人机固有的移动性和灵活性，该方法适合于网络容量不足的热点地区或农村地区</p><p>为了解决时间复杂性的问题，深度强化学习(DRL)等数据驱动的解决方案是很有希望的候选者，它们在满足实时控制要求的同时表现非常好[22]、[23]、[24]、[25]、[26]、[27]。DRL框架利用深度神经网络(dnn)来学习最优策略，该策略直接将系统状态(例如，通道条件和积压任务的数量)映射到每个时隙中的适当动作(即资源管理决策)。通过优化求解器和环境(即MEC网络)之间的持续交互来进行训练，以最大化每一步决策(例如，系统的能源效率和吞吐量)的回报。事实上，在优化中使用dnn是一种无模型的方法，其中求解器从经验中学习(即由训练数据驱动)来构建最优映射策略，而不是依赖于可能并不总是准确且容易获得的复杂数学模型。然而，有报道称单纯依赖无模型解会导致性能不稳定，收敛速度慢，甚至出现发散[23]，[25]，[26]。一个合适的方法是让深度神经网络进行部分优化(例如，优化二进制变量)，而其余部分仍然使用传统的基于模型的方法。事实上，将数据驱动和传统的基于模型的方法相结合，通过在线训练提高了DRL框架的鲁棒性和收敛性[23]、[24]、[25]、[26]。</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="Dual-Connectivity-DC"><a href="#Dual-Connectivity-DC" class="headerlink" title="Dual Connectivity(DC)"></a>Dual Connectivity(DC)</h4><p>中文：双连接</p><p>释义：手机可以同时连接到2个基站</p><h4 id="MMuti-access-Edge-Computing-MEC"><a href="#MMuti-access-Edge-Computing-MEC" class="headerlink" title="MMuti-access Edge Computing(MEC)"></a>MMuti-access Edge Computing(MEC)</h4><p>中文：多接入边缘计算，也叫移动边缘计算Mobile Edge Computing</p><p>释义：（边缘指的是服务器，不是终端）将终端的业务需求，就近调用计算能力解决，而不是层层往上报一直到核心计算中心，再下发处理</p><h4 id="Deep-Reinforcement-Learning-DRL"><a href="#Deep-Reinforcement-Learning-DRL" class="headerlink" title="Deep Reinforcement Learning(DRL)"></a>Deep Reinforcement Learning(DRL)</h4><p>中文：强化深度学习</p><p>任务队列</p><p>排队论 little定律<br>队列长度正比于等待时间<br>用队列长度来作为延时的指标</p><p>信道增益 信道衰落 路径损失指数<br>香农公式：需要的功率</p><p>一个用户最多能连接到2个服务器上</p><p>Lyapunov函数<br>漂移函数</p><p>把长期优化问题转化为一个时系的优化问题</p><p>DNN模块<br>神经网络产生一个分配决策<br>需要的是二元变量：卸载or不卸载？<br>用一个sigmoid函数，把连续值变成离散值</p><p>凸问题</p><p>卸载问题</p><p>云边端博弈场景<br>考虑能耗<br>用神经网络来处理</p><p>实验方法：压力测试<br>证明写在附录里了</p><p>扩展性不好</p><p>数学性好</p><p>拓展到多无人机的时候，复杂度会大大上升</p><p>功率和队列长度的交叉优化</p><p>多目标加权优化</p><p>功耗几几开的最重要？</p><p>用实验的方式来得出比例分配<br>判断哪个更重要<br>很难直接确定哪个占多少</p><p>好奇心算法</p><p>马尔科夫过程<br>马尔科夫状态积</p><p>单纯的分阶段</p><p>把连续的时间做了离散化处理</p><p>数字图像处理</p><p>批评模块</p><p>DRLRM</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>静力学</title>
      <link href="/posts/e2e22344.html"/>
      <url>/posts/e2e22344.html</url>
      
        <content type="html"><![CDATA[<h2 id="力矩">力矩</h2><p>等效力系：对同一刚体产生相同作用效力的力系</p><p>平衡力系：对刚体不产生任何作用效应的力系</p><p>汇交力系：力作用线汇交于一点的力系</p><p>平行力系：力作用线彼此平行的力系</p><p>对点的力矩：矢量，Mo(F),M=r×F，服从矢量和法则（合力对任一点的矩矢等于各分力对同一点矩矢的矢量和）</p><p>对轴的力矩：代数量，Mz(F),服从代数和法则</p><p>对点的力矩的矢量解析：</p><p><img src="https://pic.imgdb.cn/item/66d80f13d9c307b7e9cd281f.png" alt=""></p><p>对轴的力矩的两种计算方法：</p><p><img src="https://pic.imgdb.cn/item/66d81000d9c307b7e9ce19ec.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d81127d9c307b7e9cf57c8.png" alt=""></p><p>二者联系：</p><p>对点的力矩是个合矢量，对轴的力矩是这个矢量的分量，即在该轴的投影</p><h2 id="力偶">力偶</h2><p>力偶：2个力等值、反向、不共线，只有转动效应</p><p>力偶既无合力，也不能和一个力等效或平衡，力偶只能与力偶等效或平衡（条件：力偶矩矢相等）</p><p>在作用平面内，力偶可以：旋转、平移，或者移到另一个平行平面，都是等效的</p><p><img src="https://pic.imgdb.cn/item/66d8138dd9c307b7e9d22173.png" alt=""></p><p>不可以，轴上还有一个向上的力，和F构成一个力偶</p><p>力偶臂：二力作用线之间的垂直距离</p><p>力偶矩矢：力偶对刚体转动效应的度量M=F·d，力偶矩矢垂直于力偶所在的平面</p><p><img src="https://pic.imgdb.cn/item/66d81470d9c307b7e9d418a2.png" alt=""></p><p>力对点之矩与力偶矩都是转动效应的度量，<br>力对点之矩与矩心有关，力偶矩与矩心无关。</p><h2 id="约束">约束</h2><p>约束力的方向与限制物体运动的方向相反</p><p>1.柔索</p><p>绳索、 链条、皮带</p><p>沿着柔索,背向被约束物体</p><p>2.光滑接触面</p><p>法向约束力，支持力N</p><p>3.光滑圆柱状铰链</p><p>固定铰链：</p><p><img src="https://pic.imgdb.cn/item/66d815b8d9c307b7e9d60894.png" alt=""></p><p>方向径向，从接触点指向轴心，随载荷改变</p><p>活动铰链：</p><p>固定的下面装个轮子</p><p>连接铰链：</p><p>剪刀</p><p>4.光滑球铰链</p><p>方向径向，从接触点指向球心，随载荷改变</p><p>5.轴承</p><p>6.链杆</p><p>两端用光滑销钉连接且不考虑自身重量的构件称为链杆</p><p>平衡状态下+只有两端受力就成了二力杆：二力等值、反向、都沿杆方向</p><p><img src="https://pic.imgdb.cn/item/66d81912d9c307b7e9de667f.png" alt=""></p><p>不是随便一个杆子都是二力杆！前提：要先是链杆</p><p><img src="https://pic.imgdb.cn/item/66d8194fd9c307b7e9dea5b6.png" alt=""></p><p>7.固定端</p><h2 id="交汇力系">交汇力系</h2><p>力的可传性原理：作用于刚体上的力,可以沿其作用线滑移, 而不改变对刚体的作用效应。</p><p>平衡：</p><p>几何法：</p><p>汇交力系的几何平衡条件是力多边形自行封闭。</p><p>解析法：</p><p>力的方向怎么画不要紧，根据算出来的正负判断</p><p>注意x，y，z轴是正方向，力是有正负的，符号一个也不能错</p><p><img src="https://pic.imgdb.cn/item/66d81d4dd9c307b7e9e308b9.png" alt=""></p><p>先向平面投影，再向轴投影</p><p><img src="https://pic.imgdb.cn/item/66d81de2d9c307b7e9e3a6d4.png" alt=""></p><h2 id="任意力系">任意力系</h2><p>力的平移定理：平移后=F’+F的力矩</p><p>M(F)=r×F</p><p><img src="https://pic.imgdb.cn/item/66e0fed7d9c307b7e94c0dcb.png" alt=""></p><p>（力矩是转动轴！）</p><p><img src="https://pic.imgdb.cn/item/66e10054d9c307b7e94d6fae.png" alt=""></p><p>1.合成出来就是一个合力</p><p>2.合成出来是一个力偶</p><p>与化简中心位置无关原因：力偶矩矢（力偶）就是一个可以随便平移的量，当然和矩心无关</p><p><img src="https://pic.imgdb.cn/item/66e1020ad9c307b7e94f28a3.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66e1028dd9c307b7e94faac6.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66e10342d9c307b7e9505c1e.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66e10356d9c307b7e9506c45.png" alt=""></p><h2 id="平面任意力系">平面任意力系</h2><p>向一点化简：化简成主矢和主矩</p><p><img src="https://pic.imgdb.cn/item/66efafd9f21886ccc041d1f3.png" alt=""></p><p>合力和主矢的关系：</p><p>合力和原力系等效，主矢和原力系里的力矢和等效</p><p>平衡的充要条件：</p><p>主矢=0 &amp;&amp; 对任一点的主矩=0</p><p><img src="https://pic.imgdb.cn/item/66efb400f21886ccc0468c6d.png" alt=""></p><h2 id="空间任意力系">空间任意力系</h2><p>向一点化简：化简成主矢和主矩</p><p><img src="https://pic.imgdb.cn/item/66efb090f21886ccc042936b.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>热学</title>
      <link href="/posts/78f15731.html"/>
      <url>/posts/78f15731.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>热学微观理论是统计物理。</p><h2 id="热平衡态和状态方程"><a href="#热平衡态和状态方程" class="headerlink" title="热平衡态和状态方程"></a>热平衡态和状态方程</h2><h4 id="公式和常量"><a href="#公式和常量" class="headerlink" title="公式和常量"></a>公式和常量</h4><p>第一个公式含有方向，第二个公式不含方向，表示的是模（注意先取平均再^2和先^2再取平均的区别！）</p><p><img src="https://pic.imgdb.cn/item/66d96618d9c307b7e986c044.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d969fed9c307b7e98e6618.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d6c5ddd9c307b7e957b968.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d96b0ad9c307b7e98f53a4.png" alt=""></p><p>混合理想气体，克拉伯龙方程依然成立</p><p><img src="https://pic.imgdb.cn/item/66d6ca12d9c307b7e95af848.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d7c2cdd9c307b7e970b439.png" alt=""></p><h4 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h4><p><img src="https://pic.imgdb.cn/item/66d6c3bad9c307b7e953b165.png" alt=""></p><p>以下两种作用的强弱关系决定固、液、气态</p><p>1.描述分子之间相互作用：分子结合能fine b</p><p>2.描述热运动的剧烈程度：分子平均平动动能ek</p><p><img src="https://pic.imgdb.cn/item/66d6c4a2d9c307b7e956c4a8.png" alt=""></p><p>热学系统的分类：</p><p>1.开放系统：物质交换T 能量交换T</p><p>2.封闭系统：物质F 能量T（物理上封闭，过不去，但能量可）</p><p>3.孤立系统：物质F 能量F</p><p>4.绝热系统：只是无热交换，其他都不管</p><p>I.单相系统：只有一种物相，均匀</p><p>II.复相系统：非均匀系统</p><p>平衡态：没有外界影响，不变化（不一定是均匀态！例如在重力场里的气体）</p><p>非平衡态：没有外界影响，自发发生变化</p><p>不受外界影响的系统必将达到平衡态</p><p>热力学平衡态（热平衡态）：力学平衡+热平衡+化学平衡</p><p>不受外界影响：没物质交换，不做功，不传热，可处于均匀外力场中</p><p>热力学第0定律（热平衡定律）：</p><p>1.热平衡传递律：AC热平衡，BC热平衡，则AB热平衡</p><p>2.热平衡=同温度</p><p>理想气体微观模型：</p><p>1.分子是质点</p><p>2.分子只有瞬间的碰撞，没有其他相互作用</p><p>3.弹性碰撞</p><p>4.分子运动遵循牛顿力学</p><p>任何种类的理想气体，只要温度相同，分子的平均平动动能就相等.</p><p>拓展时看看：理想气体压强公式的推导过程，见ppt</p><h2 id="Maxwell-Boltzmann"><a href="#Maxwell-Boltzmann" class="headerlink" title="Maxwell-Boltzmann"></a>Maxwell-Boltzmann</h2><h4 id="公式和常量-1"><a href="#公式和常量-1" class="headerlink" title="公式和常量"></a>公式和常量</h4><p>核心公式：</p><p>m：每个粒子的质量，kB：Boltzmann常量</p><p><img src="https://pic.imgdb.cn/item/66e2b333d9c307b7e9ca7197.jpg" alt=""></p><p>Maxwell的铺垫————速率分布函数：</p><p><img src="https://pic.imgdb.cn/item/66e2b309d9c307b7e9ca4727.jpg" alt=""></p><p>Maxwell速度分布函数：</p><p><img src="https://pic.imgdb.cn/item/66ea8950f21886ccc084d1c0.jpg" alt=""></p><p>Boltzmann位置分布函数：</p><p><img src="https://pic.imgdb.cn/item/66ea89d8f21886ccc0867176.jpg" alt=""></p><p>能量均分定理：</p><p><img src="https://pic.imgdb.cn/item/66e2b322d9c307b7e9ca60f2.jpg" alt=""></p><h4 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h4><p>Maxwell速率分布函数图像：</p><p><img src="https://pic.imgdb.cn/item/66ea8b8bf21886ccc08c00f9.png" alt=""></p><p>气体种类、温度(只有这两个影响因素！)对Maxwell速率分布函数图像的影响：</p><p>(1) 同种气体、同温，3种平均速度大小关系</p><p><img src="https://pic.imgdb.cn/item/66e2b0c1d9c307b7e9c7e38d.png" alt=""></p><p>(2) 同气体种类，变温</p><p><img src="https://pic.imgdb.cn/item/66e2b0e8d9c307b7e9c80aca.png" alt=""></p><p>(3) 同温，变气体种类</p><p><img src="https://pic.imgdb.cn/item/66e2b105d9c307b7e9c829a5.png" alt=""></p><p>一些数学知识：</p><p><img src="https://pic.imgdb.cn/item/66e2b2f0d9c307b7e9ca2d97.jpg" alt=""></p><p>最概然速率的计算方法：</p><p>求导=0，算极值</p><p>（不止这一个公式，也可能自己算其他的，题里会有！）</p><p><img src="https://pic.imgdb.cn/item/66e2af8fd9c307b7e9c698a5.png" alt=""></p><p>积分的计算方法：</p><p>用例2来举例，步骤：</p><p>1.化简，把无关的移出积分</p><p>2.d内换元，换成e指数上的东西</p><p>3.换元的东西对v求导，得到一坨东西，除掉这坨东西（通常直接消去v移到积分外面去）</p><p>一些例子：</p><p><img src="https://pic.imgdb.cn/item/66e2afe7d9c307b7e9c6f444.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66ea90c5f21886ccc091300a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66e2b005d9c307b7e9c71d1f.png" alt=""></p><p>常见且会用到的积分公式：</p><h2 id="近平衡态中的输运过程"><a href="#近平衡态中的输运过程" class="headerlink" title="近平衡态中的输运过程"></a>近平衡态中的输运过程</h2><h4 id="公式和常量-2"><a href="#公式和常量-2" class="headerlink" title="公式和常量"></a>公式和常量</h4><p><img src="https://pic.imgdb.cn/item/66ebdfc1f21886ccc0c067eb.png" alt=""></p><p>平均自由程lamda：每个分子连续两次碰撞之间经历的自由路程的平均长度</p><p>平均碰撞频率Z：每个分子单位时间里与其它分子碰撞次数的平均值</p><p>分子的有效直径d：两个分子质心间所能达到的最小距离的平均值</p><p>单位体积中分子数n</p><p>详细推导见ppt</p><h2 id="热力学第一定律"><a href="#热力学第一定律" class="headerlink" title="热力学第一定律"></a>热力学第一定律</h2><h4 id="公式和常量-3"><a href="#公式和常量-3" class="headerlink" title="公式和常量"></a>公式和常量</h4><p>热力学第一定律：</p><p><img src="https://pic.imgdb.cn/item/66ebecc1f21886ccc0cebb98.jpg" alt=""></p><p>注意正负判断问题！！！很重要</p><p>摩尔热容、比热容、热容的定义：</p><p><img src="https://pic.imgdb.cn/item/66ebec46f21886ccc0ce529a.jpg" alt=""></p><p>一般公式和特殊（c，Cm为常量）公式：</p><p><img src="https://pic.imgdb.cn/item/66ebec80f21886ccc0ce85f6.jpg" alt=""></p><p>理想气体的定体、定压摩尔热容：</p><p><img src="https://pic.imgdb.cn/item/66f267eef21886ccc0a126f0.jpg" alt=""></p><p>二者联系：</p><p><img src="https://pic.imgdb.cn/item/66f26847f21886ccc0a174f0.jpg" alt=""></p><p>热力学第一定律对理想气体准静态过程的应用：</p><p><img src="https://pic.imgdb.cn/item/66f25d49f21886ccc09657bd.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f26271f21886ccc09bea98.jpg" alt=""></p><p>等温过程：</p><p><img src="https://pic.imgdb.cn/item/66f25f79f21886ccc098ed07.jpg" alt=""></p><p>等压过程：</p><p><img src="https://pic.imgdb.cn/item/66f26288f21886ccc09c01f4.jpg" alt=""></p><p>等体过程：</p><p><img src="https://pic.imgdb.cn/item/66f26484f21886ccc09e13ae.jpg" alt=""></p><p>伽马：比热容比</p><p><img src="https://pic.imgdb.cn/item/66f26620f21886ccc09f901a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f26847f21886ccc0a174f0.jpg" alt=""></p><p>绝热过程：</p><p><img src="https://pic.imgdb.cn/item/66f264eaf21886ccc09e71b7.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f268f2f21886ccc0a2113a.png" alt=""></p><p>关系式：</p><p><img src="https://pic.imgdb.cn/item/66f264f9f21886ccc09e7dd0.png" alt=""></p><p>等温过程和绝热过程的p-V图线很相似，区别在哪里？</p><p><img src="https://pic.imgdb.cn/item/66f266c4f21886ccc0a01b3a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f2686bf21886ccc0a193ae.png" alt=""></p><p>多方过程：</p><p><img src="https://pic.imgdb.cn/item/66f26a3af21886ccc0a31e0b.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f26a49f21886ccc0a3298a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f26a5af21886ccc0a337a9.png" alt=""></p><p>循环概述：</p><p><img src="https://pic.imgdb.cn/item/66f283c6f21886ccc0bc911f.jpg" alt=""></p><p>卡诺热机循环：</p><p><img src="https://pic.imgdb.cn/item/66f2844df21886ccc0bd0348.png" alt=""></p><p>看成黑箱的话：输入的Q1=输出的Q2+输出的W</p><p><img src="https://pic.imgdb.cn/item/66f28510f21886ccc0bdad4b.png" alt=""></p><p>没有耗散的理想模型，但没耗散不代表效率为1！</p><p><img src="https://pic.imgdb.cn/item/66f284b0f21886ccc0bd50d4.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f284caf21886ccc0bd6af1.png" alt=""></p><p>卡诺制冷机循环：</p><p>看成黑箱的话：输入的Q2+输出的W=输出的Q1</p><p><img src="https://pic.imgdb.cn/item/66f28531f21886ccc0bdcc9c.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f28575f21886ccc0be07eb.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f29f0ef21886ccc0d7202f.png" alt=""></p><p>热力学第三定律：</p><p><img src="https://pic.imgdb.cn/item/66f29ec3f21886ccc0d6ce18.png" alt=""></p><h4 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h4><p>准静态过程：无限缓慢，每一个中间状态都无限接近平衡态</p><p>内能是系统的态函数：内能改变只与初、末状态有关，与过程无关</p><p>与之相反的是：</p><p>（1）做功</p><p><img src="https://pic.imgdb.cn/item/66ebdbe2f21886ccc0bbde64.png" alt=""></p><p>（2）热量、传热</p><p><img src="https://pic.imgdb.cn/item/66ebdd28f21886ccc0bd3f30.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66ebdd1cf21886ccc0bd32c9.png" alt=""></p><p>（3）物质的比热、热容、摩尔热容都与过程有关！</p><p>改变内能的2种方法：</p><p>（1）做功</p><p>力学作用下转移的能量</p><p>（2）传热</p><p>热学作用下转移的能量</p><p>热力学第一定律的适用条件：</p><p>（1）此定律只要求系统的初、末状态是平衡态</p><p>（2）适用于任何系统（气、液、固）</p><p>汽化热：汽化过程中1mol的吸热量</p><p>水的汽化是等温等压变体积过程</p><p><img src="https://pic.imgdb.cn/item/66ebe20bf21886ccc0c31741.png" alt=""></p><p>气体绝热自由膨胀过程不可能是准静态过程!</p><p><img src="https://pic.imgdb.cn/item/66f26958f21886ccc0a26b7d.png" alt=""></p><p>循环：顺境向外（做功），逆境向内</p><p><img src="https://pic.imgdb.cn/item/66f26ab8f21886ccc0a38deb.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66f26b06f21886ccc0a3d742.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电路分析</title>
      <link href="/posts/1778b12e.html"/>
      <url>/posts/1778b12e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/66ea7f55f21886ccc079a4f8.jpg" alt=""></p><h3 id="其他">其他</h3><p>受控源元件：不是真的电源，ui不是给定的时间函数，图标为菱形，是三端元件</p><p>电阻元件：u和i代数关系</p><p>电感元件：产生磁场，储存磁场能量，u是i的微分关系</p><p>电容元件：产生电场，储存电场能量，u是i的积分关系</p><p>电源：u和i相互独立</p><p>开路：i=0，u!=0 伏安特性曲线为y轴（i为x轴，u为y轴）</p><p>短路：i!=0，u=0 伏安特性曲线为x轴</p><p>理想电压源（圆圈竖线）：u和i相互独立，能保证u的变化符合预期，与i无关（恒压源） (不能短路！)伏安特性曲线为恒压</p><p>理想电流源（圆圈横线）：对应   伏安特性曲线为恒流  (不能开路！)（开路相当于连了一个无穷大的电阻，u=iR无穷大了）</p><h3 id="关联-非关联参考方向下的吸收发出功率">关联/非关联参考方向下的吸收发出功率</h3><p>u正向：电压降低方向</p><p>i正向：正电荷移动方向</p><p>关联参考方向（ui参考方向同向）（外电路）、非关联参考方向（电源内部，即电源的参考方向一般设为非关联方向）</p><p>P的定义是吸收功率P=ui</p><p>ui取关联参考方向：P&gt;0实际吸收功率</p><p>ui取非关联参考方向：P&lt;0实际吸收功率</p><p>整个电路吸收功率=发出功率</p><h3 id="电路的分类">电路的分类</h3><p>1.集总参数电路（集中参数元件：元件尺寸&lt;&lt;电磁量工作频率的电磁波波长，而无需考虑电磁量的空间分布）（why？电磁波接收的半波定律）、分布参数电路</p><p>2.电阻电路（纯电阻电路，only欧姆定律）、动态电路（稳态分析、暂态分析）</p><p>3.直流电路DC，交流电路AC（正弦激励；周期性非正弦激励：方波信号，脉冲信号）</p><h3 id="基尔霍夫定律">基尔霍夫定律</h3><p>1.基尔霍夫电流定律KCL（对结点而言）</p><p>在集总参数电路中，任意时刻，对任意结点流出该结点I的代数和=0</p><p>流出取+</p><p>还可以这样用：把一块电路打包成一个电路元件，看成一个节点</p><p>2.基尔霍夫电压定律KVL（对回路而言）</p><p>在集总参数电路中，任意时刻，沿任意回路，所有支路V代数和=0（一圈V求和=0）</p><p>找一个绕行方向，u参考方向与回路方向同时，取+</p><p>推论：</p><p>任意两点间的电压具有确定值，与计算路径无关</p><p>网孔上的KVL方程（or额外包含一个新网孔）是一个新的独立方程</p><p>电路的网孔数，即独立KVL方程个数，=b-n+1（b是支路数，n是节点数）</p><p>巧妙的回路选取！！</p><h3 id="受控源">受控源</h3><p><img src="https://pic.imgdb.cn/item/66ea81a0f21886ccc07bdd63.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/66ea8191f21886ccc07bd241.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/66ea81c7f21886ccc07bff7d.jpg" alt=""></p><h3 id="电阻的等效变换">电阻的等效变换</h3><p>计算等效电阻的几种方法：</p><p>1.电桥平衡法</p><p>适用：有bridge桥段的电路</p><p>什么是电桥？相对于两个端口中间的“河流”横跨在其上的“桥”叫做电桥</p><p>电桥平衡：电桥两端点位相等，可视为开路</p><p><img src="https://pic.imgdb.cn/item/66ea7f76f21886ccc079c537.jpg" alt=""></p><p>2.等电位节点标记法</p><p>适用：规整的网状电路，电阻阻值都相同</p><p><img src="https://pic.imgdb.cn/item/66ea808cf21886ccc07adf9e.jpg" alt=""></p><p>3.定义法</p><p>适用：高度对称，但立体不适合用2，阻值都相同</p><p>R=U/I，常假设一个i，算出一条支路的i（只有高度对称的结构才能轻易得出一条支路的i，一点不对称都很难算出），算出这条支路的U</p><p><img src="https://pic.imgdb.cn/item/66ea82f1f21886ccc07d15c3.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/66ea8405f21886ccc07e2a99.jpg" alt=""></p><p>4.Y型转化为三角形</p><p>适用：多个Y型叠在同一组端口上（1个Y型就是简单电路了）</p><p>当同一组端口上接了2个Y型，转化为三角形后，这两个三角形是并联关系</p><p>画个Y型三角形的图，然后计算：</p><p><img src="https://pic.imgdb.cn/item/66ea876ef21886ccc0814d10.jpg" alt=""></p><p>Y型中3个电阻阻值相等：R三角=3RY</p><p><img src="https://pic.imgdb.cn/item/66ea8454f21886ccc07e74e2.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/66ea8462f21886ccc07e80be.jpg" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode</title>
      <link href="/posts/6da4d456.html"/>
      <url>/posts/6da4d456.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><p>考点：哈希查找O(1)更快速</p><p>难点在于想一个不是暴力遍历的算法</p><p>由于哈希查找的时间复杂度为 O(1)，所以可以利用哈希容器 map 降低时间复杂度</p><p>曾经想过全部存进hash map里再查找，但其实可以存入的时候判断，边存边查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;map.get(target-nums[i]),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No two sum solution&quot;</span>);<span class="comment">//如果最终都没有结果则抛出异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h2><p>和以前做过的大数相加很像！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个新联表伪指针，用来指向头指针，返回结果</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//定义一个进位数的指针，用来存储当两数之和大于10的时候，</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义一个可移动的指针，用来指向存储两个数之和的位置</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> prev;</span><br><span class="line">        <span class="comment">//当l1 不等于null或l2 不等于空时，就进入循环</span></span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">null</span> || l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果l1 不等于null时，就取他的值，等于null时，就赋值0，保持两个链表具有相同的位数</span></span><br><span class="line">            <span class="type">int</span> x= l1 !=<span class="literal">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">             <span class="comment">//如果l1 不等于null时，就取他的值，等于null时，就赋值0，保持两个链表具有相同的位数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> l2 !=<span class="literal">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//将两个链表的值，进行相加，并加上进位数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> x + y + carry;</span><br><span class="line">            <span class="comment">//计算进位数</span></span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//计算两个数的和，此时排除超过10的请况（大于10，取余数）</span></span><br><span class="line">            sum = sum % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//将求和数赋值给新链表的节点，</span></span><br><span class="line">            <span class="comment">//注意这个时候不能直接将sum赋值给cur.next = sum。这时候会报，类型不匹配。</span></span><br><span class="line">            <span class="comment">//所以这个时候要创一个新的节点，将值赋予节点</span></span><br><span class="line">            cur.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum);</span><br><span class="line">            <span class="comment">//将新链表的节点后移</span></span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="comment">//当链表l1不等于null的时候，将l1 的节点后移</span></span><br><span class="line">            <span class="keyword">if</span>(l1 !=<span class="literal">null</span>)&#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当链表l2 不等于null的时候，将l2的节点后移</span></span><br><span class="line">            <span class="keyword">if</span>(l2 !=<span class="literal">null</span>)&#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果最后两个数，相加的时候有进位数的时候，就将进位数，赋予链表的新节点。</span></span><br><span class="line">        <span class="comment">//两数相加最多小于20，所以的的值最大只能时1</span></span><br><span class="line">        <span class="keyword">if</span>(carry == <span class="number">1</span>)&#123;</span><br><span class="line">            cur.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回链表的头节点</span></span><br><span class="line">        <span class="keyword">return</span> prev.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h2><p>考点：滑动窗口</p><p>程序的本质是模拟人的思考！</p><p>滑动窗口就是队列，右边进队，直到出现重复时左边出队，直到窗口里没有重复</p><p>一直维持这样的队列，找出队列出现最长的长度时候，求出解！</p><p>右界不用特意操作，因为它是+1，+1地涨上去，记得在循环里+1就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//长度为0直接结束</span></span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; lookup;<span class="comment">//unordered_set ：元素无序且只能出现一次</span></span><br><span class="line">        <span class="type">int</span> maxStr = <span class="number">0</span>;<span class="comment">//记录最长子串长度</span></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;<span class="comment">//左边框下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;<span class="comment">//i右边框下标</span></span><br><span class="line">            <span class="keyword">while</span> (lookup.<span class="built_in">find</span>(s[i]) != lookup.<span class="built_in">end</span>())&#123;<span class="comment">//s[i]新加进来的右边框元素</span></span><br><span class="line">                lookup.<span class="built_in">erase</span>(s[left]);<span class="comment">//s[left]左边框元素，由于这里是容器，所以需要一位一位erase，如果用数组模拟，直接把left指针移动一大段即可，但数组模拟又不好查找，故还是题目里的写法最好</span></span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxStr = <span class="built_in">max</span>(maxStr,i-left<span class="number">+1</span>);<span class="comment">//还能这样直接写？</span></span><br><span class="line">            lookup.<span class="built_in">insert</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> maxStr;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>知识点：</p><p>set:不重复且有序</p><p>multiset:元素可以重复，且元素有序</p><p>unordered_set ：元素无序且只能出现一次</p><p>unordered_multiset ： 元素无序可以出现多次</p><p>尾后迭代器：指向容器中最后一个元素之后的位置的迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="comment">//返回第一个元素地址</span></span><br><span class="line">s.<span class="built_in">begin</span>()</span><br><span class="line"><span class="comment">//返回尾后迭代器</span></span><br><span class="line">s.<span class="built_in">end</span>()</span><br><span class="line"><span class="comment">//插入一个元素O(logN)</span></span><br><span class="line">s.<span class="built_in">insert</span>(element)</span><br><span class="line"><span class="comment">//删除定位器iterator指向的值O(logN)</span></span><br><span class="line"><span class="built_in">erase</span>(iterator)</span><br><span class="line"><span class="comment">//删除键值key_value的值O(logN)</span></span><br><span class="line"><span class="built_in">erase</span>(key_value)</span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line">s.<span class="built_in">size</span>()</span><br><span class="line"><span class="comment">//查找set中的某一元素，有则返回该元素对应的迭代器，无则返回尾后迭代器</span></span><br><span class="line">s.<span class="built_in">find</span>(element)</span><br><span class="line">s.<span class="built_in">end</span>()==s.<span class="built_in">find</span>(element)<span class="comment">//用于判断容器里没有查找的元素</span></span><br><span class="line"><span class="comment">//查找set中的元素出现的个数，由于set中元素唯一，此函数相当于查询element是否出现</span></span><br><span class="line">s.<span class="built_in">count</span>(element)</span><br><span class="line"><span class="comment">//判断set容器是否为空</span></span><br><span class="line">s.<span class="built_in">empty</span>()</span><br><span class="line"><span class="comment">//返回大于等于k的第一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">lower_bound</span>(k)</span><br><span class="line"><span class="comment">//返回大于k的第一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">upper_bound</span>(k)</span><br></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4.寻找两个正序数组的中位数"></a>4.寻找两个正序数组的中位数</h2><p>解法一</p><p>考点：归并排序</p><p>先将两个数组合并，然后根据奇数，还是偶数，返回中位数。</p><p>难点是中间的几个条件判断不好写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">    nums = <span class="keyword">new</span> <span class="title class_">int</span>[m + n];<span class="comment">//建一个新数组，把他们排进来</span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;<span class="comment">//特殊情况：第一个数组为空</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (nums2[n / <span class="number">2</span> - <span class="number">1</span>] + nums2[n / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> nums2[n / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;<span class="comment">//特殊情况：第二个数组为空</span></span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (nums1[m / <span class="number">2</span> - <span class="number">1</span>] + nums1[m / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums1[m / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//新数组的下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (count != (m + n)) &#123;<span class="comment">//循环结束条件</span></span><br><span class="line">        <span class="keyword">if</span> (i == m) &#123;<span class="comment">//第一个数组到头了</span></span><br><span class="line">            <span class="keyword">while</span> (j != n) &#123;</span><br><span class="line">                nums[count++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == n) &#123;<span class="comment">//第二个数组到头了</span></span><br><span class="line">            <span class="keyword">while</span> (i != m) &#123;</span><br><span class="line">                nums[count++] = nums1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;<span class="comment">//把数字往里排</span></span><br><span class="line">            nums[count++] = nums1[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[count++] = nums2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;<span class="comment">//排完了，求中位数</span></span><br><span class="line">        <span class="keyword">return</span> (nums[count / <span class="number">2</span> - <span class="number">1</span>] + nums[count / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[count / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间复杂度：遍历全部数组 (m+n)</p><p>空间复杂度：开辟了一个数组，保存合并后的两个数组 O(m+n)</p><p>解法二</p><p>想要时间复杂度O(log(m+n))必须要像二分查找那样，一次排除一半的数</p><p>考点：求第k最小数，奇数偶数求中位数的情况合并公式</p><p>时间复杂度O(log(m+n))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">    <span class="comment">//以下是将奇数和偶数求中位数的情况合并的公式：都求出一左一右两个数，偶数就是两个取平均值的数，奇数则会求出来同一个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//以上两行的工作是：求出一左一右两个数分别是第几小的数？</span></span><br><span class="line">    <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) * <span class="number">0.5</span>;  </span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//求第k最小数就是每次排除k/2个，在剩余的里面再求第k-k/2最小数，这是个递归过程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getKth</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> start1, <span class="type">int</span> end1, <span class="type">int</span>[] nums2, <span class="type">int</span> start2, <span class="type">int</span> end2, <span class="type">int</span> k)</span> &#123;<span class="comment">//end start：蓝格子范围 k：求第k最小数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> end1 - start1 + <span class="number">1</span>;<span class="comment">//len1：第一个数组的蓝格子长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> end2 - start2 + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 </span></span><br><span class="line">        <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);<span class="comment">//用递归来实现归一操作！</span></span><br><span class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];<span class="comment">//len1空了</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);<span class="comment">//结束条件，第一最小数，就返回更小的那个</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start1 + Math.min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;<span class="comment">//i，j就是箭头</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start2 + Math.min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;<span class="comment">//递归的精髓！</span></span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66d029a4d9c307b7e9d08906.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d02985d9c307b7e9d06e12.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d029b6d9c307b7e9d097f4.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d029ccd9c307b7e9d0a8f5.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d029e1d9c307b7e9d0ba80.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d02a0dd9c307b7e9d0d9e1.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d02a22d9c307b7e9d0ee73.png" alt=""></p><p>解法三</p><p>本题还有一种更加优雅的解法！这次不想看了，下次再来</p><h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5.最长回文子串"></a>5.最长回文子串</h2><p>解法一</p><p>考点：动态规划</p><p>对于一个子串而言，如果它是回文串，并且长度大于 2，那么将它首尾的两个字母去除之后，它仍然是个回文串。</p><p>（这个特点有点像递归）</p><p>基于这个特点，可以得出状态转移方程</p><p><img src="https://pic.imgdb.cn/item/66d073bed9c307b7e9364ed6.png" alt=""></p><p>动态规划的边界条件：子串的长度为 1 或 2</p><p><img src="https://pic.imgdb.cn/item/66d0742dd9c307b7e936cb79.png" alt=""></p><p>画图画出来是个size*size的棋盘格上半部分</p><p>动态规划就是根据前格的true or false+一个额外条件，来判断本格的true or false，把这半个棋盘格填完，就能得出最大值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;<span class="comment">//特殊情况1：只有一个字符</span></span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp[i][j] 表示 s[i..j] 是否是回文串</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));<span class="comment">//这里把vector写成静态的，可以直接用普通数组</span></span><br><span class="line">        <span class="comment">// 初始化：所有长度为 1 的子串都是回文串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;<span class="comment">//棋盘格上的对角线元素直接填</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递推开始</span></span><br><span class="line">        <span class="comment">// 先枚举子串长度</span></span><br><span class="line">        <span class="comment">//思考一种枚举方法，要把所有组合都考虑到，而且要从内核向外，能够填表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> L = <span class="number">2</span>; L &lt;= n; L++) &#123;<span class="comment">//L是子串长度，先固定长度，移动边界，长度由2慢慢增上去，动态规划是由内核而外（由边界条件向外）（先因再果）才能填表，这是和递归不一样的地方，递归是由果溯因</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">//i是左边界</span></span><br><span class="line">                <span class="comment">// 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得</span></span><br><span class="line">                <span class="type">int</span> j = L + i - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 如果右边界越界，就可以退出当前循环</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= n) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s[i] != s[j]) &#123;<span class="comment">//先由附加的一个条件大类</span></span><br><span class="line">                    dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) &#123;<span class="comment">//附加条件成立，再分成两条路：由前人推出，或边界条件直接得出</span></span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; maxLen) &#123;</span><br><span class="line">                    maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">                    begin = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(begin, maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66d079c7d9c307b7e9411c43.png" alt=""></p><p>解法二</p><p>考点：中心扩展</p><p>其实和动态规划的想法是一样的，只是没有列表，空间复杂度减少了</p><p>中心：回文中心</p><p>遍历枚举每一个回文中心并尝试向两边扩展，直到无法扩展为止。</p><p>至于回文中心是一个字符还是两个字符的问题，不需要分类讨论，left，right两根指针往外扩张，起始位置时，一个中心时，left和right都指向它</p><p>类似的奇偶归一处理在中位数那边也遇到过，思考一下有没有什么可总结的~</p><p>本题的细节再想想是怎么写出来的，比如return {left + 1, right - 1};</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">expandAroundCenter</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;<span class="comment">//left，right是扩张的起始位置</span></span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.<span class="built_in">size</span>() &amp;&amp; s[left] == s[right]) &#123;<span class="comment">//条件成立就一直扩张</span></span><br><span class="line">            --left;</span><br><span class="line">            ++right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;left + <span class="number">1</span>, right - <span class="number">1</span>&#125;;<span class="comment">//扩张到最大返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;<span class="comment">//这两个用于记录最长串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;<span class="comment">//遍历一遍，i是回文中心</span></span><br><span class="line">            <span class="keyword">auto</span> [left1, right1] = <span class="built_in">expandAroundCenter</span>(s, i, i);<span class="comment">//奇外扩</span></span><br><span class="line">            <span class="keyword">auto</span> [left2, right2] = <span class="built_in">expandAroundCenter</span>(s, i, i + <span class="number">1</span>);<span class="comment">//偶外扩</span></span><br><span class="line">            <span class="keyword">if</span> (right1 - left1 &gt; end - start) &#123;</span><br><span class="line">                start = left1;</span><br><span class="line">                end = right1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right2 - left2 &gt; end - start) &#123;</span><br><span class="line">                start = left2;</span><br><span class="line">                end = right2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, end - start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解法三</p><p>考点：Manacher算法</p><p>一种复杂的专业算法，<a href="https://leetcode.cn/problems/longest-palindromic-substring/solutions/255195/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/">戳这里看</a></p><h2 id="6-Z字形变换"><a href="#6-Z字形变换" class="headerlink" title="6.Z字形变换"></a>6.Z字形变换</h2><p>就是模拟人的思路！把人脑的思路拆解！</p><p>体会一个非常妙的点：用flag实现了i的周期性变化：123212321</p><p>动画见<a href="https://leetcode.cn/problems/zigzag-conversion/solutions/21610/zzi-xing-bian-huan-by-jyd/">这里</a></p><p>自变量为往后遍历的这个过程，因变量是每个字符的行数，记录行数，最后以行数为自变量输出</p><p>和以下有点相似：</p><p>画圆按时间线拉长，拉成sin cos三角函数</p><p>这个过程可以拆解为：</p><p>画圆：自变量为时间，因变量是纵坐标，记录纵坐标，最后以横坐标为自变量输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows &lt; <span class="number">2</span>)<span class="comment">//特殊情况</span></span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">rows</span><span class="params">(numRows)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, flag = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;<span class="comment">//这是什么语法？</span></span><br><span class="line">            rows[i].<span class="built_in">push_back</span>(c);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == numRows <span class="number">-1</span>)</span><br><span class="line">                flag = - flag;</span><br><span class="line">            i += flag;<span class="comment">//用flag实现了i的周期性变化：123212321</span></span><br><span class="line">        &#125;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> string &amp;row : rows)</span><br><span class="line">            res += row;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66d0844fd9c307b7e94e07d3.png" alt=""></p><h2 id="6-整数反转"><a href="#6-整数反转" class="headerlink" title="6.整数反转"></a>6.整数反转</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/posts/5751eea2.html"/>
      <url>/posts/5751eea2.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-头文件">C++头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">using</span> <span class="keyword">namespace</span> std</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="STL">STL</h2><p><a href="https://wyqz.top/p/870124582.html#toc-heading-13">看这一篇就够了~</a></p><h2 id="基础知识">基础知识</h2><p>转义字符</p><p><img src="https://pic.imgdb.cn/item/66d12351d9c307b7e907fd72.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cpp里有String类型，不用再用数组储存字符串了</span></span><br><span class="line">string greeting = <span class="string">&quot;hello, runoob&quot;</span>;</span><br><span class="line"><span class="comment">//define规定常量（常量通常写成大写字母）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LENGTH 10 </span></span><br><span class="line"><span class="comment">//const规定指定类型的常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> NEWLINE = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">//按位与</span></span><br><span class="line">p&amp;q</span><br><span class="line"><span class="comment">//按位或</span></span><br><span class="line">p|q</span><br><span class="line"><span class="comment">//按位异或</span></span><br><span class="line">p^q</span><br><span class="line"><span class="comment">//取反</span></span><br><span class="line">~p</span><br><span class="line"><span class="comment">//返回变量所属类型的字节数</span></span><br><span class="line"><span class="built_in">sizeof</span>()</span><br><span class="line"><span class="comment">//条件运算符。如果 Condition 为真 ? 则值为 X : 否则值为 Y。</span></span><br><span class="line">Condition ? X : Y</span><br><span class="line"><span class="comment">//强制类型转换</span></span><br><span class="line"><span class="built_in">int</span>(<span class="number">2.200</span>)</span><br><span class="line"><span class="comment">//成员</span></span><br><span class="line">.</span><br><span class="line"><span class="comment">//指针成员</span></span><br><span class="line">-&gt;</span><br><span class="line"><span class="comment">//有string类型，可以直接赋值，这样的字符串完全具有数组的特征</span></span><br><span class="line">string str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="comment">//同时也可以当做变量看，可以赋值</span></span><br><span class="line">string str1 = str;</span><br><span class="line"><span class="comment">//但是string不是C风格的字符串，不以&#x27;\0&#x27;结尾</span></span><br><span class="line"><span class="comment">//返回 C 风格的字符串（以 null 结尾）。</span></span><br><span class="line"><span class="type">char</span>* cstr = str.<span class="built_in">c_str</span>();</span><br><span class="line"><span class="comment">//switch语句</span></span><br><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       <span class="built_in">statement</span>(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 可选的</span></span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       <span class="built_in">statement</span>(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">// 可选的</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 您可以有任意数量的 case 语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">// 可选的</span></span><br><span class="line">       <span class="built_in">statement</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数：别忘了要在开头声明</span></span><br><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">( parameter list )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   body of the function</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入输出</span></span><br><span class="line">cin&gt;&gt;name;</span><br><span class="line">cin&gt;&gt;name&gt;&gt;age;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;xxx&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"><span class="comment">//标准错误流</span></span><br><span class="line">cerr&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">name</span>&#123;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">name</span>* next;</span><br><span class="line">&#125;another name;</span><br><span class="line"><span class="comment">//类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">name</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:<span class="comment">//访问修饰符：</span></span><br><span class="line">    <span class="comment">//变量</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">&#125;;<span class="comment">//分号结束一个类</span></span><br><span class="line"><span class="comment">//类对象定义（类对象指的是由类定义的对象）</span></span><br><span class="line">name A;<span class="comment">//声明对象A是name类</span></span><br><span class="line"><span class="comment">//访问类对象的成员</span></span><br><span class="line">A.height</span><br><span class="line"><span class="comment">//指向自己的指针(this是指针！)</span></span><br><span class="line"><span class="keyword">this</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">name</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;value=a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//public:一类里的方法（不管有没有写出去）不用加前缀，main里对象.变量</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">double</span> length;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">setLength</span><span class="params">( <span class="type">double</span> len )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Line::setLength</span><span class="params">( <span class="type">double</span> len )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  length = len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 程序的主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Line line;</span><br><span class="line">   line.<span class="built_in">setLength</span>(<span class="number">6.0</span>); </span><br><span class="line">   line.length = <span class="number">10.0</span>; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//private:一类里的方法（不管有没有写出去）不用加前缀，其他类里不可访问</span></span><br><span class="line"><span class="comment">//protected:在子类里可访问，不用加前缀</span></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:<span class="keyword">public</span> Animal&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//多继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:<span class="keyword">public</span> Animal,<span class="keyword">public</span> Life&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//重载</span></span><br><span class="line"><span class="comment">//动态内存分配</span></span><br><span class="line"><span class="type">double</span>* a= <span class="keyword">new</span> <span class="type">double</span>;</span><br><span class="line"><span class="comment">//检查自由储存区是否还有内存</span></span><br><span class="line"><span class="type">double</span>* pvalue  = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>( !(pvalue  = <span class="keyword">new</span> <span class="type">double</span> ))</span><br><span class="line">&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Error: out of memory.&quot;</span> &lt;&lt;endl;</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="keyword">delete</span> a;<span class="comment">//a是指针</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66d13a47d9c307b7e926c147.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66d13b10d9c307b7e9275c5f.png" alt=""></p><h2 id="库函数">库函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cmath库</span></span><br><span class="line"><span class="built_in">cos</span>()</span><br><span class="line"><span class="built_in">sin</span>()</span><br><span class="line"><span class="built_in">tan</span>()</span><br><span class="line"><span class="built_in">log</span>()<span class="comment">//自然对数</span></span><br><span class="line"><span class="built_in">pow</span>(x,y)<span class="comment">//x的y次方（x，y，返回值都是double类型，整数最好自己写）</span></span><br><span class="line"><span class="built_in">abs</span>()<span class="comment">//整数绝对值</span></span><br><span class="line"><span class="built_in">fabs</span>()</span><br><span class="line"><span class="built_in">hypot</span>()<span class="comment">//参数为一个直角三角形的两个直角边，函数会返回斜边的长度。</span></span><br><span class="line"><span class="built_in">sqrt</span>()<span class="comment">//返回：double 开平方</span></span><br><span class="line"><span class="comment">//排序，cmp是可选参数</span></span><br><span class="line"><span class="built_in">sort</span>(numbers.<span class="built_in">begin</span>(),numbers.<span class="built_in">end</span>(),cmp);</span><br><span class="line"><span class="built_in">sort</span>(numbers.<span class="built_in">begin</span>(),numbers.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//在容器中查找与给定值匹配的第一个元素，找到了，it指向匹配元素，没找到，则为尾后迭代器</span></span><br><span class="line"><span class="keyword">auto</span> it =<span class="built_in">find</span>(numbers.<span class="built_in">begin</span>(),numbers.<span class="built_in">end</span>(),value);</span><br><span class="line"><span class="comment">//复制算法,将一个范围内的元素复制到另一个容器或数组</span></span><br><span class="line"><span class="built_in">copy</span>(numbers.<span class="built_in">begin</span>(),source.<span class="built_in">end</span>(),destination);</span><br><span class="line"><span class="comment">//比较两个容器或两个范围内的元素是否相等。</span></span><br><span class="line"><span class="type">bool</span> result =<span class="built_in">equal</span>(v<span class="number">1.</span><span class="built_in">begin</span>(),v<span class="number">1.</span><span class="built_in">end</span>(),v<span class="number">2.</span><span class="built_in">begin</span>());</span><br><span class="line"><span class="type">bool</span> result =<span class="built_in">equal</span>(v<span class="number">1.</span><span class="built_in">begin</span>(),v<span class="number">1.</span><span class="built_in">end</span>(),v<span class="number">2.</span><span class="built_in">begin</span>(),cmp);</span><br><span class="line"><span class="comment">//常用</span></span><br><span class="line">std::cout &lt;&lt; (result ? <span class="string">&quot;Vectors are equal.&quot;</span> : <span class="string">&quot;Vectors are not equal.&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">FILE *f=<span class="built_in">fopen</span>(<span class="string">&quot;example&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="built_in">fclose</span>(f);</span><br><span class="line"><span class="comment">//格式化读写</span></span><br><span class="line"><span class="built_in">fscanf</span>(f, <span class="string">&quot;%d %f&quot;</span>, &amp;number, &amp;pi);</span><br><span class="line"><span class="built_in">fprintf</span>(f,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(f, <span class="string">&quot;%d %fn&quot;</span>, <span class="number">42</span>, <span class="number">3.14159</span>);</span><br><span class="line"><span class="comment">//用于格式化输出到字符串和从字符串中读取</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(a,<span class="string">&quot;Value: %d&quot;</span>, value);</span><br><span class="line"><span class="built_in">sscanf</span>(a, <span class="string">&quot;Value: %d&quot;</span>, &amp;readValue); </span><br><span class="line"><span class="comment">//读写一个字符</span></span><br><span class="line"><span class="type">char</span> c = <span class="built_in">getc</span>(f);</span><br><span class="line"><span class="built_in">putc</span>(<span class="string">&#x27;A&#x27;</span>, f);</span><br><span class="line"><span class="comment">//读写一行，读了放在a数组里，最多不超过100个字符</span></span><br><span class="line"><span class="built_in">fgets</span>(a,<span class="number">100</span>,f);</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;Hello, World!\n&quot;</span>, f); </span><br><span class="line"><span class="comment">//常用结构</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fgets</span>(a, <span class="number">100</span>, f) != <span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//常用结构</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *file = <span class="built_in">fopen</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;w&quot;</span>); <span class="comment">// 打开文件用于写入</span></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;Error opening file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(file); <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类-对象方法">类/对象方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出</span></span><br><span class="line">ofstream outfile;</span><br><span class="line">outfile.<span class="built_in">open</span>(<span class="string">&quot;要打开的文件名&quot;</span>);</span><br><span class="line">outfile&lt;&lt;.....&lt;&lt;endl;</span><br><span class="line">outfile.<span class="built_in">close</span>();</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line">ifstream infile;</span><br><span class="line">infile.<span class="built_in">open</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">infile&gt;&gt;data;</span><br><span class="line">infile.<span class="built_in">close</span>();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">cin.<span class="built_in">getline</span>()</span><br><span class="line">cin.<span class="built_in">ignore</span>();</span><br><span class="line"><span class="comment">//+连接字符串</span></span><br><span class="line">string result = str1 + str2;</span><br><span class="line">str.<span class="built_in">size</span>()</span><br><span class="line">str.<span class="built_in">empty</span>()</span><br><span class="line"><span class="comment">//获得子字符串</span></span><br><span class="line">string sub=str.<span class="built_in">substr</span>(beginlocation,length);</span><br><span class="line"><span class="comment">//返回查找串的起始位置，返回数组下标</span></span><br><span class="line">str.<span class="built_in">find</span>(<span class="string">&quot;World&quot;</span>)</span><br><span class="line"><span class="comment">//从位置 pos 开始，替换 5 个字符为 &quot;C++&quot;</span></span><br><span class="line">str.<span class="built_in">replace</span>(pos,<span class="number">5</span>,<span class="string">&quot;C++&quot;</span>);</span><br><span class="line"><span class="comment">//在指定位置插入内容。</span></span><br><span class="line">str.<span class="built_in">insert</span>(pos,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//删除指定位置的字符或子字符串。</span></span><br><span class="line">str.<span class="built_in">erase</span>(pos, length);</span><br><span class="line"><span class="comment">//比较两个字符串。</span></span><br><span class="line"><span class="type">int</span> result = str.<span class="built_in">compare</span>(<span class="string">&quot;other&quot;</span>);</span><br><span class="line"><span class="comment">//查找第一个匹配的位置，返回数组下标</span></span><br><span class="line">str.<span class="built_in">find_first_of</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"><span class="comment">//查找最后一个匹配的位置，返回数组下标</span></span><br><span class="line">str.<span class="built_in">find_last_of</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-3面向对象</title>
      <link href="/posts/dfb97799.html"/>
      <url>/posts/dfb97799.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java继承">Java继承</h2><p>子类拥有父类非 private 的属性、方法。</p><p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// extends 只能继承一个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Penguin</span>  <span class="keyword">extends</span>  <span class="title class_">Animal</span>&#123;&#125;</span><br><span class="line"><span class="comment">//implements可以同时继承多个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B &#123;&#125;</span><br><span class="line"><span class="comment">// this 调用自己的方法</span></span><br><span class="line"><span class="built_in">this</span>.eat();   </span><br><span class="line"><span class="comment">// super 调用父类方法</span></span><br><span class="line"><span class="built_in">super</span>.eat();  </span><br><span class="line"><span class="comment">//使用 final 关键字声明类，就是把类定义定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写</span></span><br><span class="line"><span class="keyword">final</span> class 类名 &#123;&#125;</span><br><span class="line">(<span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">default</span>/<span class="keyword">protected</span>) <span class="keyword">final</span> 返回值类型 方法名()&#123;&#125;</span><br></pre></td></tr></table></figure><p>遗留问题：构造器的继承？</p><h2 id="Java重写Override">Java重写Override</h2><p>即外壳不变，核心重写</p><p><img src="https://pic.imgdb.cn/item/66d03222d9c307b7e9decd11.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">      <span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//用dog的方法创建一个animal，但b的声明是animal类，所以b没有bark方法</span></span><br><span class="line">      a.move();<span class="comment">//执行 Animal 类的方法</span></span><br><span class="line">      b.move();<span class="comment">//执行 Dog 类的方法，对于重写过的方法，是有的</span></span><br><span class="line">      b.bark();<span class="comment">//b没有bark方法，编译错误</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Java重载overloading">Java重载overloading</h2><p>在一个类里面，方法名字相同，而参数不同(顺序、参数、个数不同)。内容不关注，返回类型可以相同也可以不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>&#123;&#125;   </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,String s)</span>&#123;<span class="keyword">return</span> ...;&#125;   </span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66d03386d9c307b7e9dfe31e.png" alt=""></p><h2 id="Java抽象类">Java抽象类</h2><p>除了不能实例化对象，其他和普通类一样，它等着被继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Java接口Interface">Java接口Interface</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-2类与方法</title>
      <link href="/posts/54ef836c.html"/>
      <url>/posts/54ef836c.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Number-Math-类">Java Number &amp; Math 类</h2><p>全部函数见https://www.runoob.com/java/java-number.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Math.sin()</span><br><span class="line">Math.cos()</span><br><span class="line">Math.tan()</span><br><span class="line">Math.PI</span><br><span class="line">Math.atan()</span><br><span class="line">Math.toDegrees()</span><br></pre></td></tr></table></figure><h2 id="Java-Character-类">Java Character 类</h2><h2 id="Java-String-类">Java String 类</h2><p>创建String对象的基本语法</p><p>注意:String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。</p><p>如果需要对字符串做很多修改，那么应该选择使用 StringBuffer &amp; StringBuilder 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Runoob&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回字符串长度</span></span><br><span class="line">str.length()</span><br><span class="line"><span class="comment">//连接两个字符串</span></span><br><span class="line"><span class="string">&quot;Hello,&quot;</span> + <span class="string">&quot; runoob&quot;</span> + <span class="string">&quot;!&quot;</span></span><br><span class="line"><span class="comment">//按字典序比较两个字符串，不考虑大小写，如果此字符串小于字符串参数，则返回一个小于 0 的值</span></span><br><span class="line">str3.compareToIgnoreCase( str1 )</span><br><span class="line"><span class="comment">//创建格式化字符串</span></span><br><span class="line">String fs;</span><br><span class="line">fs = String.format(<span class="string">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class="line">                   <span class="string">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class="line">                   <span class="string">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class="line">                   <span class="string">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Arrays方法">Arrays方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类名：</span></span><br><span class="line">Arrays</span><br><span class="line">Arrays.binarySearch(numbers, key);</span><br><span class="line"><span class="comment">//二分查找指定对象，数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(Object[] a, Object key)</span></span><br><span class="line"><span class="comment">//如果两个指定的 long 型数组彼此相等，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(<span class="type">long</span>[] a, <span class="type">long</span>[] a2)</span></span><br><span class="line"><span class="comment">//将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> val)</span></span><br><span class="line"><span class="comment">//对指定对象数组根据其元素的自然顺序进行升序排列。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Object[] a)</span></span><br></pre></td></tr></table></figure><h2 id="Java-数组">Java 数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明：</span></span><br><span class="line">datatype[] name;</span><br><span class="line"><span class="type">double</span>[] mylist;</span><br><span class="line"><span class="comment">//创建:</span></span><br><span class="line">name=<span class="keyword">new</span> <span class="title class_">datatype</span>[size];</span><br><span class="line"><span class="comment">//声明和创建合一：</span></span><br><span class="line">dataType[] name = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br><span class="line"><span class="comment">//for-each循环，它能在不使用下标的情况下遍历数组：</span></span><br><span class="line"><span class="keyword">for</span>(type element: name)</span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> element: myList) </span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组作为函数的参数：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组作为函数的返回值：这里好像和c不一样？不区分指针和值？</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] list) &#123;</span><br><span class="line">  <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[list.length];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = result.length - <span class="number">1</span>; i &lt; list.length; i++, j--) &#123;</span><br><span class="line">    result[j] = list[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多维数组：</span></span><br><span class="line">dataType[][] name = <span class="keyword">new</span> <span class="title class_">dataType</span>[size][size];</span><br><span class="line"><span class="comment">//从最高维开始，分别为每一维分配空间：不理解！！！</span></span><br><span class="line">String[][] s = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>][];</span><br><span class="line">s[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">s[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Good&quot;</span>);</span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Luck&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;to&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;you&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="comment">//一个例子：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArray</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 数组大小</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 定义数组</span></span><br><span class="line">      <span class="type">double</span>[] myList = <span class="keyword">new</span> <span class="title class_">double</span>[size];</span><br><span class="line">      myList[<span class="number">0</span>] = <span class="number">5.6</span>;</span><br><span class="line">      myList[<span class="number">1</span>] = <span class="number">4.5</span>;</span><br><span class="line">      myList[<span class="number">2</span>] = <span class="number">3.3</span>;</span><br><span class="line">      myList[<span class="number">3</span>] = <span class="number">13.2</span>;</span><br><span class="line">      myList[<span class="number">4</span>] = <span class="number">4.0</span>;</span><br><span class="line">      myList[<span class="number">5</span>] = <span class="number">34.33</span>;</span><br><span class="line">      myList[<span class="number">6</span>] = <span class="number">34.0</span>;</span><br><span class="line">      myList[<span class="number">7</span>] = <span class="number">45.45</span>;</span><br><span class="line">      myList[<span class="number">8</span>] = <span class="number">99.993</span>;</span><br><span class="line">      myList[<span class="number">9</span>] = <span class="number">11123</span>;</span><br><span class="line">      <span class="comment">// 计算所有元素的总和</span></span><br><span class="line">      <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">         total += myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;总和为： &quot;</span> + total);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java时间">Java时间</h2><h2 id="Java正则表达式">Java正则表达式</h2><h2 id="Java方法">Java方法</h2><p>方法包含于类或对象中</p><p>System.out.println()</p><p>这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。</p><p><img src="https://pic.imgdb.cn/item/66ce8478d9c307b7e9fd64a8.png" alt=""></p><h2 id="Java-IO">Java IO</h2><p>创建 BufferedReader 对象的基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开头</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//main方法里</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in))</span><br><span class="line"><span class="comment">//main 函数上</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读入一个字符</span></span><br><span class="line">(<span class="type">char</span>) br.read()</span><br><span class="line"><span class="comment">//读入一行</span></span><br><span class="line">br.readLine()</span><br><span class="line"><span class="comment">//判断字符串str是否为end</span></span><br><span class="line">str.equals(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建 InputStream 对象的基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:/java/hello&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭此文件输入流</span></span><br><span class="line">f.close();</span><br><span class="line"><span class="comment">//清除与该文件的连接</span></span><br><span class="line">f.finalize();</span><br><span class="line"><span class="comment">//从 InputStream 对象读取指定个数的数据,返回值为返回下一个数据，如果已经到结尾则返回-1。</span></span><br><span class="line">f.read(<span class="type">int</span> r)</span><br><span class="line"><span class="comment">//从输入流读取r.length长度的数据到数组中。返回读取的字节数。如果是文件结尾则返回-1。</span></span><br><span class="line">f.read(<span class="type">byte</span>[] r)</span><br></pre></td></tr></table></figure><p>创建 OutputStream 对象的基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:/java/hello&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭此文件流</span></span><br><span class="line">f.close()；</span><br><span class="line"><span class="comment">//写一个字符到输出流中</span></span><br><span class="line">f.write(<span class="type">int</span> w)；</span><br><span class="line"><span class="comment">//把指定数组中w.length长度的内容写到OutputStream中</span></span><br><span class="line">f.write(<span class="type">byte</span>[] w)；</span><br><span class="line"><span class="comment">//清除与该文件的连接</span></span><br><span class="line">f.finalize();</span><br></pre></td></tr></table></figure><h2 id="Java-Scanner-类">Java Scanner 类</h2><p>创建 Scanner 对象的基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开头</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"><span class="comment">//main方法里</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出到控制台</span></span><br><span class="line">System.out.print(<span class="string">&quot;xxx&quot;</span>/<span class="type">char</span>);</span><br><span class="line"><span class="comment">//输出到控制台,自动换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;xxx&quot;</span>/<span class="type">char</span>+....元素);</span><br><span class="line"><span class="comment">//读一个字符串，返回值为读取的一个字符串</span></span><br><span class="line"><span class="comment">//对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</span></span><br><span class="line"><span class="comment">//不能得到带有空格的字符串</span></span><br><span class="line">scan.next()</span><br><span class="line"><span class="comment">//判断是否还有输入，无则0，有则非0</span></span><br><span class="line">scan.hasNext()</span><br><span class="line"><span class="comment">//关闭scanner</span></span><br><span class="line">scan.close();</span><br><span class="line"><span class="comment">//判断是否还有输入</span></span><br><span class="line">scan.hasNextLine()</span><br><span class="line"><span class="comment">//读入一行，返回的是输入回车之前的所有字符，可以获得空白。</span></span><br><span class="line">scan.nextLine()</span><br><span class="line"><span class="comment">//读入一个整数</span></span><br><span class="line">scan.nextInt()</span><br><span class="line"><span class="comment">//判断是否为int</span></span><br><span class="line">scan.hasNextInt()</span><br><span class="line"><span class="comment">//以下同理</span></span><br><span class="line">scan.hasNextFloat()</span><br><span class="line">scan.nextFloat()</span><br></pre></td></tr></table></figure><h2 id="小程序段">小程序段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//一个老生常谈的注意点：要传递数组size进去</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">nPrintln</span><span class="params">(String message, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    System.out.println(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-1基础知识</title>
      <link href="/posts/df2849ec.html"/>
      <url>/posts/df2849ec.html</url>
      
        <content type="html"><![CDATA[<p>本文用CLASSNAME指代类名、object指代对象。</p><h2 id="基本语法">基本语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修饰符顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>+CLASSNAME/返回值 方法名()/变量</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span></span><br><span class="line"><span class="comment">//载入类</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//主函数放在一个类里面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.一个Java文件只有一个public类，文件名和public类一致</span></span><br><span class="line"><span class="comment">2.没有public类，文件名和任意类名一致</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//类创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CLASSNAME</span>&#123;&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Caravan</span>&#123;&#125;<span class="comment">//抽象类</span></span><br><span class="line"><span class="comment">//方法创建：和C语言函数创建相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFormat</span><span class="params">(String format)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addInstance</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">goFast</span><span class="params">()</span>;<span class="comment">//抽象方法：声明必须以；结尾！！</span></span><br><span class="line"><span class="comment">//对象创建</span></span><br><span class="line">CLASSNAME object=<span class="keyword">new</span> <span class="title class_">CLASSNAME</span>();<span class="comment">//声明为此类，调用此类的构造方法，括号里可填入参数</span></span><br><span class="line"><span class="comment">//变量创建</span></span><br><span class="line"><span class="comment">//1.类里面的变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//2.局部变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//Java常量</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.1415927</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BOXWIDTH</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"><span class="comment">//强制类型转换（会有精度损失问题）</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此处只写出基本语法，继承、重写、重载、抽象类的语法见本系列第三篇。</p><h2 id="构造方法">构造方法</h2><p>高级部分见<a href="https://blog.csdn.net/qq_52880445/article/details/120708152">这篇文章</a></p><p>1.构造方法的名称必须与类同名</p><p>2.一个类可以有多个构造方法</p><h2 id="变量">变量</h2><p>变量可分为类里面的变量和局部变量，局部变量就不多说了，下面介绍类里面的变量。</p><p>1.成员变量（实例变量）</p><p>属于对象，是对象特有的数据（不同对象的实例变量被分配给不同的内存空间），只能被对象所调用</p><p>2.类变量（静态变量）：static</p><p>属于类，实现共性数据的对象共享（所有对象的这个类变量都分配给相同的一处内存），可以被对象调用，也可以被类名调用</p><p>静态方法（static）只能访问静态变量，先于对象存在，不能用对象来调用（不可用this、super）只能用类名来调用</p><p>带来的问题是需要考虑类变量的线程安全性</p><h2 id="修饰符">修饰符</h2><p>1.public</p><p>所有类可见</p><p>2.private</p><p>同一类可见</p><p>3.protected</p><p>待补全</p><p>继承问题：</p><p>（1）子类的访问权限一定要比父类的访问权限大</p><p>（2）父类中声明为 private 的方法，不能够被子类继承</p><p>4.static</p><p>见上文</p><p>5.final</p><p>final变量=常量，final方法能被继承不能被重写，final类不能被继承</p><p>6.abstract</p><p>抽象方法声明以;结尾！！！public abstract sample();</p><p>7.synchronized</p><h2 id="遗留问题">遗留问题</h2><p>抽象类里的private变量能否被子类访问？</p><p>继承、重写时的类型声明？</p><p>this、super的性质？</p><p>静态方法中不能使用this，super关键字。</p><p>因为this代表对象，而静态在时，有可能没有对象，所以this无法使用。</p><p>包的定义?protected的用法？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>butterfly+markdown语法</title>
      <link href="/posts/c12cf4b2.html"/>
      <url>/posts/c12cf4b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件">安装插件</h2><p>在vscode中安装如图所示插件：<br><img src="https://pic.imgdb.cn/item/66a9b667d9c307b7e9d3ff0e.png" alt="1"></p><p>查看markdown书写效果：用vscode打开md文件，空白处右击鼠标，“命令面板”，输入“Markdown: Open Preview to the Side”，打开侧边预览。<br>在预览框中右击鼠标还提供了各种导出功能。</p><p>基础markdown参考<a href="https://www.runoob.com/markdown/md-advance.html">菜鸟教程</a>。</p><h2 id="代码块">代码块</h2><p>片段：单反引号</p><p><code>printf()</code> 函数</p><p>区块：三反引号+语言</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="多级标题">多级标题</h2><p>几个井号就是几级标题。</p><h2 id="文字样式">文字样式</h2><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><h2 id="分割线">分割线</h2><p><code>---</code>或<code>***</code></p><hr><h2 id="区块层次嵌套">区块层次嵌套</h2><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想<br>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块引用</span></span><br><span class="line"><span class="quote">&gt; 菜鸟教程</span></span><br><span class="line"><span class="quote">&gt; 学的不仅是技术更是梦想</span></span><br><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure><h2 id="链接">链接</h2><p>这是一个链接 <a href="https://www.runoob.com">菜鸟教程</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [<span class="string">菜鸟教程</span>](<span class="link">https://www.runoob.com</span>)</span><br></pre></td></tr></table></figure><h2 id="图片">图片</h2><p><img src="https://pic.imgdb.cn/item/66a881c3d9c307b7e9dba61a.jpg" alt="丹尼尔"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">丹尼尔</span>](<span class="link">https://pic.imgdb.cn/item/66a881c3d9c307b7e9dba61a.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="表格">表格</h2><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table><h2 id="公式">公式</h2><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><h2 id="动态标签">动态标签</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip [参数，可选]"><p>文本内容</p></div><p>仅展示一种，更多种效果见 <a href="https://www.fomal.cc/posts/2013454d.html">参考文章</a>（后文也是）。</p><h2 id="分栏">分栏</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="折叠框">折叠框</h2><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/posts/d4a1185.html"/>
      <url>/posts/d4a1185.html</url>
      
        <content type="html"><![CDATA[<p>2024年7月29日，历经多次失败（主题不兼容、无法部署到github等问题）之后，我的小屋终于建设好啦！现在我激动地写下这句经典开局语：</p><h1 id="HELLO-WORLD-！"><a href="#HELLO-WORLD-！" class="headerlink" title="HELLO WORLD ！"></a>HELLO WORLD ！</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
