<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紫霞仙子🥝</title>
  
  <subtitle>zix1a&#39;s BLOG</subtitle>
  <link href="https://zix1a.github.io/atom.xml" rel="self"/>
  
  <link href="https://zix1a.github.io/"/>
  <updated>2024-08-27T07:42:53.455Z</updated>
  <id>https://zix1a.github.io/</id>
  
  <author>
    <name>zix1a🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java</title>
    <link href="https://zix1a.github.io/posts/df2849ec.html"/>
    <id>https://zix1a.github.io/posts/df2849ec.html</id>
    <published>2024-08-27T04:32:52.000Z</published>
    <updated>2024-08-27T07:42:53.455Z</updated>
    
    <content type="html"><![CDATA[<p>2024.8.27</p><h2 id="今日格言">今日格言</h2><p>I used to roll the dice</p><p>凡人生死曾由我主宰</p><p>Feel the fear in my enemy’s eyes</p><p>尽情品味惊恐在死敌的瞳孔绽开</p><p>这次菜鸟教程只是粗看！还有很多地方没学，下次再来细看一遍</p><h2 id="基本概念">基本概念</h2><h4 id="类Class">类Class</h4><p>定义对象的属性和方法</p><p><code>public class Car &#123; ... &#125;</code></p><h4 id="对象Object">对象Object</h4><p>类的实例，具有状态和行为</p><p>srds，有人这么写C</p><p><code>Car myCar = new Car();</code></p><h4 id="继承Inheritance">继承Inheritance</h4><p>一个类可以继承另一个类的属性和方法</p><p><code>public class Dog extends Animal &#123; ... &#125;</code></p><h4 id="封装Encapsulation">封装Encapsulation</h4><p>将对象的状态（字段）私有化，通过公共方法访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br></pre></td></tr></table></figure><h4 id="方法Method">方法Method</h4><p>定义类的行为，包含在类中的函数。</p><p>在C里叫做函数，是过程，在Java里是方法，是类的技能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Info&quot;</span>); &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    String breed;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    String colour;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">name</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法重载Method-Overloading">方法重载Method Overloading</h4><p>同一个类中可以有多个同名的方法，但参数不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="构造方法">构造方法</h4><p>看这一篇https://blog.csdn.net/qq_52880445/article/details/120708152 编程的高级部分，以后来研究</p><h4 id="创建对象">创建对象</h4><p>公式：</p><p><code>referenceVariable的意思是类！</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">referenceVariable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Constructor</span>();</span><br></pre></td></tr></table></figure><p>(1)Java的默认：</p><p>用关键字 new 来创建一个新的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Puppy</span> <span class="variable">myPuppy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Puppy</span>();</span><br></pre></td></tr></table></figure><p>(2)自定义：</p><p>见构造方法</p><h4 id="访问类中的变量和方法">访问类中的变量和方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 访问类中的变量 */</span></span><br><span class="line">referenceVariable.variableName;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">referenceVariable.methodName();</span><br></pre></td></tr></table></figure><p>完整的小狗例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Puppy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Puppy</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗的名字是 : &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置 age 的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取 age 的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取 name 的值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 主方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Puppy</span> <span class="variable">myPuppy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Puppy</span>(<span class="string">&quot;Tommy&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 通过方法来设定 age</span></span><br><span class="line">        myPuppy.setAge(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 调用另一个方法获取 age</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myPuppy.getAge();</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗的年龄为 : &quot;</span> + age);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 也可以直接访问成员变量（通过 getter 方法）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;变量值 : &quot;</span> + myPuppy.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源文件声明规则">源文件声明规则</h4><p>一个源文件中只能有一个 public 类</p><p>一个源文件可以有多个非 public 类</p><p>源文件的名称应该和 public 类的类名保持一致</p><p>优先顺序：package,import,类定义</p><h4 id="没理解的没写上来">没理解的没写上来</h4><p>如接口等，以后补全，见https://www.runoob.com/java/java-object-classes.html</p><h2 id="数据类型">数据类型</h2><h4 id="类型">类型</h4><p>整数组：</p><p>int 32位</p><p>byte 8位</p><p>short 16位</p><p>long 64位</p><p>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一，用于数据大小比较小的情景。</p><p>浮点数组：</p><p>float 32位</p><p>double 64位</p><p>其他组：</p><p>char</p><p>boolean 取值：true和false</p><p>String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b, c;         <span class="comment">// 声明三个int型整数：a、 b、c</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">3</span>, e = <span class="number">4</span>, f = <span class="number">5</span>; <span class="comment">// 声明三个整数并赋予初值</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">22</span>;         <span class="comment">// 声明并初始化 z</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;runoob&quot;</span>;  <span class="comment">// 声明并初始化字符串 s</span></span><br><span class="line"><span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14159</span>; <span class="comment">// 声明了双精度浮点型变量 pi</span></span><br><span class="line"><span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span>;        <span class="comment">// 声明变量 x 的值是字符 &#x27;x&#x27;。</span></span><br></pre></td></tr></table></figure><p>注意String的大写，其他和C完全一样</p><p>查询数据类型的取值范围：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimitiveTypeTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// byte  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Java常量">Java常量</h4><p>用final修饰常量，相当于C里的define</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="literal">PI</span> = <span class="number">3.1415927</span>;</span><br></pre></td></tr></table></figure><p>变量赋值和C完全一样</p><p>前缀 0 表示 8 进制，而前缀 0x 代表 16 进制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">68</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">decimal</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">octal</span> <span class="operator">=</span> <span class="number">0144</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">hexa</span> <span class="operator">=</span>  <span class="number">0x64</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>转义字符是\n!!!backspace下的那个键！！！</p><h4 id="强制类型转换">强制类型转换</h4><p>精度损失问题！！</p><p>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">128</span>;   </span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;</span><br></pre></td></tr></table></figure><h2 id="Java变量">Java变量</h2><p>局部变量：只在当前层下</p><p>成员变量：写在类下，作用域为整个类</p><h4 id="静态变量">静态变量</h4><p>相当于C里的全局变量，静态变量在类加载时被创建，在整个程序运行期间都存在</p><p>定义方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问方式：</p><p>由于静态变量是与类相关的，因此可以通过类名来访问静态变量，也可以通过实例名来访问静态变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyClass.count = <span class="number">10</span>; <span class="comment">// 通过类名访问</span></span><br><span class="line"><span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">obj.count = <span class="number">20</span>; <span class="comment">// 通过实例名访问</span></span><br></pre></td></tr></table></figure><p>常量一旦被赋值就不能再修改，静态变量的值可以在运行时改变。和C一样！！！</p><p><code>静态变量的线程安全性</code></p><p>Java 中的静态变量是属于类的，而不是对象的实例。因此，当多个线程同时访问一个包含静态变量的类时，需要考虑其线程安全性。</p><p>静态变量在内存中只有一份拷贝，被所有实例共享。因此，如果一个线程修改了静态变量的值，那么其他线程在访问该静态变量时也会看到修改后的值。这可能会导致并发访问的问题，因为多个线程可能同时修改静态变量，导致不确定的结果或数据一致性问题。</p><p>为了确保静态变量的线程安全性，需要采取适当的同步措施，如同步机制、原子类或 volatile 关键字，以便在多线程环境中正确地读取和修改静态变量的值。</p><h2 id="Java修饰符">Java修饰符</h2><h4 id="访问控制修饰符">访问控制修饰符</h4><p>private：同一类可见（类和接口不可用）</p><p>public：所有类可见</p><p>protected： 对同一包内的类和所有子类可见</p><p>如何访问private？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String format;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getFormat</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.format;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFormat</span><span class="params">(String format)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.format = format;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id=""></h2><p>第一个程序hello world</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66cd7711d9c307b7e9c8020c.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024.8.27&lt;/p&gt;
&lt;h2 id=&quot;今日格言&quot;&gt;今日格言&lt;/h2&gt;
&lt;p&gt;I used to roll the dice&lt;/p&gt;
&lt;p&gt;凡人生死曾由我主宰&lt;/p&gt;
&lt;p&gt;Feel the fear in my enemy’s eyes&lt;/p&gt;
&lt;p&gt;尽情品味惊恐在死</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数字电路</title>
    <link href="https://zix1a.github.io/posts/de3adb5f.html"/>
    <id>https://zix1a.github.io/posts/de3adb5f.html</id>
    <published>2024-08-24T07:21:38.000Z</published>
    <updated>2024-08-24T12:34:05.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比特率-数据率">比特率(数据率)</h2><p>每秒钟所传输的数据位数。</p><h2 id="进制转换">进制转换</h2><p>立马去搜，然后记住！</p><p>总结一下进制的转换就是：小转大乘R取整—大转小除R取余</p><h2 id="原码-反码-补码">原码&amp;反码&amp;补码</h2><p>原码：加一个符号位，其1表示负数，0表示正数（如+1000=01000；-1000=11000）<br>反码：正数反码和原码一样，负数除去符号位都取反（如（-1000）=10111）<br>补码：正数和原码一样，负数在其反码的基础上加1（如（-1000）=11000）</p><p>总结： “即正数原码、反码和补码都一样，负数的反码除去符号位都取反，补码在其反码的基础上再加1即可”</p><h2 id="格雷码">格雷码</h2><p>详解见https://blog.csdn.net/yellow_hill/article/details/118694574 ！！！！！</p><p><img src="https://pic.imgdb.cn/item/66c994c9d9c307b7e90edf4a.png" alt=""></p><p>在一组数的编码中，若任意两个相邻的代码只有一位二进制数不同，则称这种编码为格雷码（Gray Code），另外由于最大数与最小数之间也仅一位数不同，即“首尾相连”，因此又称循环码或反射码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;比特率-数据率&quot;&gt;比特率(数据率)&lt;/h2&gt;
&lt;p&gt;每秒钟所传输的数据位数。&lt;/p&gt;
&lt;h2 id=&quot;进制转换&quot;&gt;进制转换&lt;/h2&gt;
&lt;p&gt;立马去搜，然后记住！&lt;/p&gt;
&lt;p&gt;总结一下进制的转换就是：小转大乘R取整—大转小除R取余&lt;/p&gt;
&lt;h2 id=&quot;原码-反</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>电机</title>
    <link href="https://zix1a.github.io/posts/ef868677.html"/>
    <id>https://zix1a.github.io/posts/ef868677.html</id>
    <published>2024-08-24T02:11:13.000Z</published>
    <updated>2024-08-24T02:11:13.241Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>杂七杂八plus</title>
    <link href="https://zix1a.github.io/posts/53d5a67.html"/>
    <id>https://zix1a.github.io/posts/53d5a67.html</id>
    <published>2024-08-23T08:55:58.000Z</published>
    <updated>2024-08-24T02:11:33.818Z</updated>
    
    <content type="html"><![CDATA[<p>大纲：<a href="https://blog.csdn.net/qq_31347869/article/details/106555229">https://blog.csdn.net/qq_31347869/article/details/106555229</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大纲：&lt;a href=&quot;https://blog.csdn.net/qq_31347869/article/details/106555229&quot;&gt;https://blog.csdn.net/qq_31347869/article/details/106555229&lt;/a&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>继续杂七杂八</title>
    <link href="https://zix1a.github.io/posts/61a99a42.html"/>
    <id>https://zix1a.github.io/posts/61a99a42.html</id>
    <published>2024-08-23T03:21:49.000Z</published>
    <updated>2024-08-23T08:53:27.675Z</updated>
    
    <content type="html"><![CDATA[<p>大纲网址：<a href="https://blog.csdn.net/IT__learning/article/details/119715469">https://blog.csdn.net/IT__learning/article/details/119715469</a></p><h2 id="域名">域名</h2><p>域名：用点符号分割的计算机名字。</p><p>IP地址对应着网络上的各个机器，但由于IP地址没有具体字面含义，难以记忆，有时IP地址还会经常更换。引入域名来标识某台机器。</p><p>域名：人记   ip:机器识别</p><p>域名是全球唯一的，每次申请域名，都会在域名服务器上查询是否存在。所有域名都是以“ . ”开始的。</p><p>顶级域名代表服务器或网站的性质，常见有com（商用）、cn（中国）、net（提供信息）、edu（教育）、gov（政府）等等。</p><p>域名呈现树状结构，分为顶级域名，二级域名，三级域名…</p><h2 id="DNS-域名服务器">DNS(域名服务器)</h2><p>域名转化为ip称为：域名解析。</p><p>DNS :进行域名解析的服务器，将域名(机器名) 转换为 IP地址。</p><p>在 Internet 上域名与 IP 地址之间是一一对应的。（Internet上是一对一，但实际上虚拟主机等问题…?）</p><p>DNS 是一个分布式数据库：每个站点只保留它自己的那部分数据。即使单个主机出故障也不会妨碍整个 DNS 系统。大多数域名都能在本地解析。</p><h3 id="域名解析流程">域名解析流程</h3><p>1.<code>本地缓存</code>里找映射，未命中继续下一步</p><p>包括：浏览器自身缓存、本地hosts文件</p><p>2.<code>本地域名服务器LDNS</code>里找映射，未命中继续下一步</p><p>LDNS一般在城市的一个角落</p><p>3.LDNS向<code>根服务器</code>发送解析请求，得到结果，LDNS将结果返回给主机，并缓存域名-ip映射</p><p>查询方式之一————迭代查询：</p><p>DNS 服务器会向客户机提供其他能够解析查询请求的 DNS 服务器地址，当客户机发送查询请求时，DNS 服务器并不直接回复查询结果，而是告诉客户机另一台 DNS 服务器地址，客户机再向这台 DNS 服务器提交请求，依次循环直到返回查询的结果为止。迭代查询返回的是最佳的查询点或者主机地址。本地域名服务器向根域名服务器的查询通常是采用迭代查询。</p><p>问路人：甲，艾尔登法环在哪里？</p><p>甲：你去问乙，他知道。</p><p>问路人：乙，艾尔登法环在哪里？</p><p>乙：你去问丙，他知道。</p><p>…</p><p>查询方式之二————</p><p>4.主机在浏览器/操作系统OS缓存域名-ip映射，并建立连接。</p><h2 id="URL-就是网址">URL(就是网址)</h2><p>全球唯一性</p><p>URL的一般语法格式为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol <span class="symbol">://</span> hostname[<span class="symbol">:port</span>] / path / [;parameters][<span class="string">?q</span>uery]<span class="comment">#fragment</span></span><br></pre></td></tr></table></figure><p>protocol（协议）：指定使用的传输协议</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http 通过 <span class="variable constant_">HTTP</span> 访问该资源。 格式 <span class="variable constant_">HTTP</span><span class="symbol">://</span></span><br><span class="line">https 通过安全的 <span class="variable constant_">HTTPS</span> 访问该资源。 格式 <span class="variable constant_">HTTPS</span><span class="symbol">://</span></span><br><span class="line">ftp 通过 <span class="variable constant_">FTP</span>访问资源。格式 <span class="variable constant_">FTP</span><span class="symbol">://</span></span><br></pre></td></tr></table></figure><p>hostname（主机名）：是指存放资源的服务器主机名（域名）或 IP 地址。有时，在主机名前也可以包含连接到服务器所需的用户名和密码（格式：username:password@hostname）。</p><p>如https://blog.csdn.net/chen1415886044/article/details/103914255中的blog.csdn.net</p><h2 id="网页">网页</h2><p>网页是一个包含HTML标签的<code>纯文本文件</code>，它可以<code>存放在世界某个角落的某一台计算机中</code>，是万维网中的一“页”，是超文本标记语言格式（标准通用标记语言的一个应用，文件扩展名为.html或.htm）。</p><p>网页要通过网页浏览器来阅读。</p><h2 id="超文本-超媒体">超文本&amp;超媒体</h2><p>超文本（Hypertext）是一种文本类型，它允许通过链接（通常称为超链接）从一个文档跳转到另一个文档或文档中的特定部分。 这种链接机制是万维网（World Wide Web，简称Web）的核心技术之一。</p><p>超文本文档仅包含文本信息，而超媒体文档还包含其他表示方式的信息，如图形、图像、声音、动画，甚至活动视频图像。</p><h2 id="万维网">万维网</h2><p>就是所有网页连接起来，连成的一张网。</p><p>万维网四大之问</p><p>1）<code>（地址）</code>怎样标志分布在整个互联网上的万维网文档？</p><p>使用统一资源定位符 URL来标志万维网上的各种文档。使每一个文档在整个互联网的范围内具有唯一的标识符 URL。</p><p>2）<code>（链接）</code>用何协议实现万维网上各种超链的链接？</p><p>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是超文本传送协议 HTTP (HyperText Transfer Protocol)。HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。</p><p>3）<code>（显示）</code>怎样使各种万维网文档都能在互联网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？</p><p>超文本标记语言 HTML (HyperText Markup Language) 使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到互联网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。</p><p><code>html，css，markdown都是标记语言，不是编程语言</code></p><p>4）<code>（搜索）</code>怎样使用户能够很方便地找到所需的信息？</p><p>为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）。</p><h2 id="因特网，互联网和万维网">因特网，互联网和万维网</h2><p>互联网：internet，凡是能彼此之间通信的设备组成的网络就叫互联网。（包含所有物联网）（强调东西之间的通信）</p><p>因特网：Internet，由千万台<code>设备（计算机、服务器等）</code>组成的网络。（强调计算机之间的通信）</p><p>万维网：无数个网络站点和网页的集合，它们在一起构成了因特网最主要的部分。（强调网页之间的连接）</p><p><img src="https://pic.imgdb.cn/item/66c83ff2d9c307b7e92fd117.png" alt=""></p><h2 id="HTTP">HTTP</h2><p>HTTP 是用于从万维网（WWW）服务器传输超文本到本地浏览器的传送协议。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HTTP</span> 定义了客户端如何从服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。HTTP 采用了请求 / 响应模型，客户端向服务器发送一个请求报文，服务器以一个状态行作为响应。</span><br></pre></td></tr></table></figure><h3 id="HTTP-请求响应步骤">HTTP 请求响应步骤</h3><p>1）客户端连接到web的源服务器</p><p>用户确定要访问网页的URL，并将其输入到浏览器的地址栏中，浏览器向DNS服务器发出请求，获取Web源服务器域名所对应的IP地址。</p><p>HTTP 客户端（浏览器）与 Web 服务器的 HTTP 端口（默认为 80）建立一个<code>TCP 套接字连接</code>，比如http://www.abc.com；</p><p>（2）发送 HTTP 请求</p><p>通过<code>TCP 套接字</code>，客户端向 Web 服务器发送一个请求传输网页的 HTTP 请求报文，一个请求报文由请求行、请求头部、空行和请求数据 4 部分组成；</p><p>（3）服务器接受请求并返回 HTTP 响应</p><p>Web 服务器定位请求资源并将资源复本写到 TCP 套接字，由客户端读取。一个响应由 状态行、响应头部、空行和响应数据 4 部分组成；</p><p>（4）释放 TCP 连接</p><p>若 connection 模式为 close，则服务器主动关闭 TCP 连接，客户端被动关闭连接，TCP 连接释放；若 connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求；</p><p>（5）客户端浏览器解析 HTML 内容</p><p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据 HTML，<code>根据 HTML 的语法对其进行格式化，并在浏览器窗口中显示</code>；</p><p><img src="https://pic.imgdb.cn/item/66c842bfd9c307b7e935239b.png" alt=""></p><h2 id="HTTPS">HTTPS</h2><p>HTTPS 是使用了 TLS/SSL 加密的 HTTP 协议.</p><h2 id="代理服务器">代理服务器</h2><p>客户和web源服务器之间的中间商。</p><p>网络代理（Proxy），又称代理服务器，是一种位于客户端和目标服务器之间的中间服务器。它可以接收客户端的请求，然后代表客户端与目标服务器进行通信，最后将目标服务器的响应返回给客户端。</p><p>用处：</p><p>web缓存，翻墙，加速</p><h2 id="web缓存">web缓存</h2><p>Web 缓存是指一个 Web 资源（如 html 页面，图片，js，数据等）存在于 Web 服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的 URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。</p><p>举例：</p><p>比较常见的就是<code>浏览器会缓存</code>访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。</p><p>一些代理服务器也会缓存，为一个大地区提供缓存服务。用户————代理服务器，查缓存————缓存没有，代理服务器向源服务器请求…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大纲网址：&lt;a href=&quot;https://blog.csdn.net/IT__learning/article/details/119715469&quot;&gt;https://blog.csdn.net/IT__learning/article/details/119715469&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>杂七杂八的学习记录</title>
    <link href="https://zix1a.github.io/posts/4e22cd09.html"/>
    <id>https://zix1a.github.io/posts/4e22cd09.html</id>
    <published>2024-08-22T08:50:30.000Z</published>
    <updated>2024-08-23T03:19:06.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="差分信号">差分信号</h2><p>精髓是计算差值，让噪音变成基准值。</p><p>步骤：</p><p>1、两条线来传输信号：</p><p>下边的线路传输原信号。</p><p>上边的线路传输反转的信号。</p><p>2、在传输过程中，出现了噪音Noise，Noise也是一种信号，它会把自己叠加到上下两条线路的信号中。</p><p>3、Receiver会计算两个信号中同一时刻的差值，然后使用这个差值来重新组织信号，就能得到信号的原始逻辑状态。</p><p>优点：</p><p>首先，差分信号具有很强的抗干扰能力。当噪声出现时，由于噪声是等值且同时作用在两个信号线上，所以噪声对两个信号的影响是一样的，比如上图中都是给信号施加了一个向上震荡，此时两个信号之间的差值和没有干扰时的差值是一样的，所以差分信号能保持原信号的逻辑值，这就是说的它的抗干扰能力。</p><p>其次，差分信号能有效抑制电磁干扰（EMI）。这是因为两根线靠得很近，信号幅值相等，所以与地线的耦合电磁场的幅值也相等，但信号极性相反，这就像两个相同大小但方向相反的矢量，他们会相互抵消，这就是为什么差分信号能有效抑制电磁干扰。</p><p>再者，差分信号的时序定位准确。接收端以两根线上的信号幅值之差发生正负跳变的点，作为判断逻辑0/1跳变的点的。这就像两个人在唱歌，他们的节奏完全一致，所以我们可以通过他们的节奏来判断他们唱的是哪一句歌词，这就是为什么我们说差分信号的时序定位准确。而普通单端信号以阈值电压作为信号逻辑0/1的跳变点，受阈值电压与信号幅值电压之比的影响较大，不适合低幅度的信号。例如，假设我们的阈值是2.5伏特，而信号的幅度只有0.1伏特，那么只需要0.1伏特的噪声，就可能导致我们误判信号的值。</p><h2 id="单端信号">单端信号</h2><p>一根信号线，基准线是地面。</p><h2 id="以太网">以太网</h2><p>因为以太网通信不是像蓝牙那样无限通信，而是通过连接线进行通信。</p><h2 id="局域网LAN">局域网LAN</h2><p>计算机数量的增加，通过交换机和路由器将所有的计算机连在一起，形成局域网。(交换机工作在链路层，它不会跨网络传输，而是用来传输本网络上的数据帧，路由器工作在网络层，它是为了将不同的网络连接起来)</p><h2 id="协议">协议</h2><p><img src="https://pic.imgdb.cn/item/66c702d1d9c307b7e9c2735e.png" alt=""></p><h2 id="TCP-IP分层结构">TCP/IP分层结构</h2><h3 id="物理层">物理层</h3><p>负责光/电信号的传递方式。 比如现在以太网通用的网线(双绞线)、早期以太网采用的的同轴电缆 (现在主要用于有线电视)、光纤，现在的wiﬁ无线网使用电磁波等都属于物理层的概念。物理层的能力决定了最大传输速率、传输距离、抗干扰性等。集线器(Hub)工作在物理层，集线器的主要作用是放大信号。</p><h3 id="数据链路层">数据链路层</h3><p>负责设备之间的数据帧的传送和识别。例如网卡设备的驱动、帧同步(就是说从网线上检测到什么信号算作新帧的开始)、冲突检测(如果检测到冲突就自动重发)、数据差错校验等工作。 有以太网、令牌环网、 无线LAN等标准。 交换机(Switch)工作在数据链路层。</p><h3 id="网络层">网络层</h3><p>负责地址管理和路由选择。例如在IP协议中，通过IP地址来标识一台主机，并通过路由表的方式规划出两台主机之间的数据传输的线路(路由)。 路由器(Router)工作在网路层。</p><h3 id="应用层">应用层</h3><p>负责应用程序间沟通。如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问 协议（Telnet）等。 网络编程主要就是针对应用层。</p><h3 id="整体说明">整体说明</h3><p>对于一台计算机，它的操作系统实现了从传输层到物理层</p><p>对于一个路由器，实现了从网络层到物理层</p><p>对于交换机，实现了从数据链路层到物理层</p><p>对于集线器，只实现了物理层</p><h2 id="ARP协议">ARP协议</h2><p>作用：将已知IP地址转换为MAC地址.</p><p>在同一个网段下，两台主机要进行通信，可直接交付。只要根据ARP(地址解析协议)找到主机IP和MAC地址的映射，即可直接交付。</p><h3 id="ARP映射方式">ARP映射方式</h3><h4 id="静态映射">静态映射</h4><p>静态映射的意思是要手动创建一张ARP表，把逻辑（IP）地址和物理地址关联起来。这个ARP表储存在网络中的每一台机器上。例如，知道其机器的IP地址但不知道其物理地址的机器就可以通过查ARP表找出对应的物理地址。</p><p>相当于静态数组，静态表格，一一对应，弊端当然是动态的变动。</p><h4 id="动态映射">动态映射</h4><p>动态映射时，每次只要机器知道另一台机器的逻辑（IP）地址，就可以使用协议找出相对应的物理地址。已经设计出的实现了动态映射协议的有ARP和RARP两种。ARP把逻辑（IP）地址映射为物理地址。RARP把物理地址映射为逻辑（IP）地址。</p><p>具体原理不详。</p><h2 id="端口">端口</h2><p>在网络技术中，端口包括逻辑端口和物理端口两种类型。</p><p>物理端口是用于连接物理设备之间的接口，如ADSL Modem、集线器、交换机、路由器上用于连接其他网络设备的接口。</p><p>逻辑端口是指逻辑意义上用于区分服务的端口，比如用于浏览网页服务的80端口，用于FTP服务的21端口等。</p><p>网络端口一般讲的是逻辑端口。</p><p>通过端口号来区别相同计算机所提供的这些不同的服务，如常见的端口号21表示的是FTP服务，端口号23表示的是Telnet服务，端口号25指的是SMTP服务等。</p><h4 id="端口的分类">端口的分类</h4><p>TCP与UDP段结构中端口地址都是16比特，可以有在0—65535范围内的端口号。</p><p>端口号范围划分：</p><p>0 - 1023： 知名端口号，HTTP、FTP、 SSH等这些广为使用的应用层协议他们的端口号都是固定的，自己写的程序中，不能随意绑定知名端口号。</p><p>1024 - 65535：操作系统动态分配的端口号。 客户端程序的端口号，就是由操作系统从这个范围分配的。</p><p>常见的知名端口号：</p><p>ssh服务器：22端口</p><p>ftp服务器：21端口</p><p>http服务器：80端口</p><p>telnet服务器：23端口</p><p>https服务器：443端口</p><p>MYSQL服务器：3306端口</p><h2 id="UDP协议-面向数据报-不可靠">UDP协议(面向数据报&amp;不可靠)</h2><p>无连接：只知道对端的IP和端口号就可以发送，不需要实现建立连接。</p><p>不可靠：没有确认机制， 没有重传机制，不会给应用层返回任何错误信息。</p><p>面向数据报： 应用层交给UDP多长的报文， UDP原样发送既不会拆分，也不会合并。</p><p>UDP的缓冲区：UDP存在接收缓冲区，但不存在发送缓冲区。（因为UDP没有重传机制，当报文丢失时，UDP不需要重新发送，而TCP不同，他必须具备发送缓冲区，当报文丢失时，TCP必须保证重新发送，所以必须要具备发送缓冲区）</p><p>UDP具有接收缓冲区，但是这个接收缓冲区不能保证收到的UDP报文的顺序和发送UDP报的顺序一致，如果缓冲区满了再到达的UDP数据报就会被丢弃。</p><h2 id="TCP协议-面向连接-可靠">TCP协议(面向连接&amp;可靠)</h2><p>面向连接：数据传输之前客户端和服务器端必须建立连接</p><p>可靠的：数据传输是有序的 要对数据进行校验</p><h3 id="三次握手">三次握手</h3><p>进行三次握手的目的是为了确认双方的接收能力和发送能力是否正常。</p><p>公安局：你好！陈某，听得到吗？（一次会话）</p><p>陈某：听到了，王哥，你能听到吗 （二次会话）</p><p>公安局：听到了，你过来自首吧 （开始会话）（三次会话）</p><h3 id="四次挥手">四次挥手</h3><p>张三：好的，那我先走了</p><p>李四：好的，那你走吧</p><p>李四：那我也走了？</p><p>张三：好的，你走吧</p><h2 id="ip地址和MAC地址">ip地址和MAC地址</h2><h3 id="ip地址">ip地址</h3><p>IP地址是在IP协议中，用来标识网络中不同主机的地址。</p><h3 id="MAC地址">MAC地址</h3><p>MAC地址用来识别数据链路层中相相邻的节点。</p><p>长度为48位，6个字节。 一般用16进制数字加上冒号的形式来表示，例如: 08:00:27:03:fb:19</p><p>在网卡出厂时就确定了，不能修改。</p><h3 id="区别">区别</h3><p>源IP地址和目的IP地址是在IP层封装到IP数据报中，而MAC地址是在链路层封装到数据帧中。</p><p>在数据传输过程中，IP地址和MAC地址的变化相当于唐三藏取经的过程。</p><p>源IP相当于东土大唐，而目的IP相当于西天，在整个过程中是不变化的</p><p>源MAC地址相当于车迟国，而目的MAC地址相当于女儿国，在这个过程中是要一直改变的，是上一站到下一站的地址变化。</p><h2 id="单工通信">单工通信</h2><p>单工通信只支持信号在一个方向上传输（正向或反向），任何时候不能改变信号的传输方向。</p><p>为保证正确传送数据信号，接收端要对接收的数据进行校验，若校验出错，则通过监控信道发<br>送请求重发的信号。</p><p>此种方式适用于数据收集系统，如气象数据的收集、电话费的集中计算等。</p><p>例如计算机和打印机之间的通信是单工模式，因为只有计算机向打印机传输数据，而没有相反<br>方向的数据传输。还有在某些通信信道中，如单工无线发送等。</p><h2 id="半双工通信">半双工通信</h2><p>半双工通信允许信号在两个方向上传输，但某一时刻只允许信号在一个信道上单向传输。</p><p>因此，半双工通信实际上是一种可切换方向的单工通信。</p><p>此种方式适用于问讯、检索、科学计算等数据通信系统；</p><p>传统的对讲机使用的就是半双工通信方式。由于对讲机传送及接收使用相同的频率，不允许同<br>时进行。因此一方讲完后，需设法告知另一方讲话结束（例如讲完后加上’OVER’），另一方<br>才知道可以开始讲话。</p><h2 id="全双工">全双工</h2><p>全双工通信允许数据同时在两个方向上传输，即有两个信道，因此允许同时进行双向传输。</p><p>全双工通信是两个单工通信方式的结合，要求收发双方都有独立的接收和发送能力。</p><p>全双工通信效率高，控制简单，但造价高。</p><p>计算机之间的通信是全双工方式。一般的电话、手机也是全双工的系统,因为在讲话时可以听到对方的声音。</p><h2 id="子网掩码">子网掩码</h2><p>IP地址有网络位和主机位，IP地址本身不再记录划分信息，而是通过一个独立的数字序列来辅助标记，这就是子网掩码。</p><p>这个序列同样由32位二进制组成，例如：</p><p>11111111 11111111 11111111 00000000</p><p>255.255.255.0</p><p>连续的1代表网络位，连续的0代表主机位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IP：</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.33</span><span class="number">.112</span>  </span><br><span class="line"><span class="comment">// 子网掩码：</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>说明这个IP地址192.168.33是网络位，112 是主机位。</p><h3 id="子网掩码的两个功能">子网掩码的两个功能</h3><h4 id="判断是否在一个子网">判断是否在一个子网</h4><p>通过IP地址与子网掩码进行and运算，如果相等，说明AB笔记本处于同一个子网，同一个WIFI，可以直接通信。</p><p>and运算理解为位相乘就可以了，上下每一位都相乘得。</p><h4 id="可变长子网掩码————划分更多子网">可变长子网掩码————划分更多子网</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.128</span> (/<span class="number">25</span>) - 二进制表示：<span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.10000000</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.192</span> (/<span class="number">26</span>) - 二进制表示：<span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11000000</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.224</span> (/<span class="number">27</span>) - 二进制表示：<span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11100000</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.240</span> (/<span class="number">28</span>) - 二进制表示：<span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11110000</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.248</span> (/<span class="number">29</span>) - 二进制表示：<span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11111000</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.252</span> (/<span class="number">30</span>) - 二进制表示：<span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11111100</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.254</span> (/<span class="number">31</span>) - 二进制表示：<span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11111110</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span> (/<span class="number">32</span>) - 二进制表示：<span class="number">11111111.11111111</span><span class="number">.11111111</span><span class="number">.11111111</span></span><br></pre></td></tr></table></figure><p>就拿第二个举例好了，通过二进制表示我们可以看出，原本主机位前两个00变成了11，这是因为网络位扩展了，占用了2个主机位。此时网络位个数为8+8+8+2=26，主机位为8-2=6个。</p><p>所以255.255.255.192 (/26) 就表示这个是个可变长子网掩码，且网络位为26。当然真正电脑里展示的子网掩码只会是255.255.255.192。</p><p>一般我们写IP地址为了突出子网掩码的信息，可以这么写：192.168.11.30/26，从后面这个/26就能够看出是一个C类的可变长子网。</p><p>那255.255.255.192究竟划分了几个子网呢？只需要看被占用的主机位有多少种组合，例如00，10，01，11，也就是划分了4个子网。对应到IP地址的最后一组分别为：</p><p>00情况下的00000000-00111111 转为 0-63</p><p>01情况下的01000000-01111111 转为 64-127</p><p>10情况下的10000000-10111111 转为128-191</p><p>11情况下的11000000-11111111 转为192-255</p><p>假设我有个IP地址的主机位是192.163.1，子网的地址范围将是：</p><p>第一个子网：192.163.1.0 到 192.163.1.63</p><p>第二个子网：192.163.1.64 到 192.163.1.127</p><p>第三个子网：192.163.1.128 到 192.163.1.191</p><p>第四个子网：192.163.1.192 到 192.163.1.255</p><p>在每个子网中：</p><p>第一个地址（如192.163.1.0, 192.163.1.64, 等）是子网的网络地址，用于标识子网，不分配给设备。</p><p>最后一个地址（如192.163.1.63, 192.163.1.127, 等）是子网的广播地址，用于发送到该子网内所有设备的广播消息。</p><p>其余的地址（如192.163.1.1到192.163.1.62, 192.163.1.65到192.163.1.126, 等）可以分配给子网内的设备。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;差分信号&quot;&gt;差分信号&lt;/h2&gt;
&lt;p&gt;精髓是计算差值，让噪音变成基准值。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;1、两条线来传输信号：&lt;/p&gt;
&lt;p&gt;下边的线路传输原信号。&lt;/p&gt;
&lt;p&gt;上边的线路传输反转的信号。&lt;/p&gt;
&lt;p&gt;2、在传输过程中，出现了噪音Nois</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络-2</title>
    <link href="https://zix1a.github.io/posts/f21a8031.html"/>
    <id>https://zix1a.github.io/posts/f21a8031.html</id>
    <published>2024-08-13T07:33:52.000Z</published>
    <updated>2024-08-13T08:40:31.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对应第一章：概述">对应第一章：概述</h3><p><img src="https://pic.imgdb.cn/item/66bb0c38d9c307b7e9a13390.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb0ca7d9c307b7e9a1a9eb.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb0d78d9c307b7e9a2b0a6.png" alt=""></p><p>现实中不是方波信号，为了方便理解而简化的。</p><p><img src="https://pic.imgdb.cn/item/66bb157fd9c307b7e9ac0c8b.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb156fd9c307b7e9abf941.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1562d9c307b7e9abec37.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb154ad9c307b7e9abd4a9.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1535d9c307b7e9abbd0e.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1523d9c307b7e9aba78b.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb150cd9c307b7e9ab8ae8.png" alt=""></p><p>层层封装完整过程见[视频]。(<a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=9&amp;spm_id_from=pageDriver&amp;vd_source=34820c9d0b6a738fa175298be8d2048b">https://www.bilibili.com/video/BV1c4411d7jb/?p=9&amp;spm_id_from=pageDriver&amp;vd_source=34820c9d0b6a738fa175298be8d2048b</a>)</p><p>之所以称为逻辑通信，是因为这种通信其实不存在，是假设出来的一种通信，实际上是层层封装和拆包装的过程，不存在两个对等实体直接通信。这样做是为了方便研究，不受其他层的干扰。</p><p><img src="https://pic.imgdb.cn/item/66bb1b2fd9c307b7e9b1df75.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1b1ed9c307b7e9b1cdf2.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1b01d9c307b7e9b1afcd.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1abad9c307b7e9b16a1e.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1aa2d9c307b7e9b15353.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1a8cd9c307b7e9b13c9a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb1a74d9c307b7e9b12555.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对应第一章：概述&quot;&gt;对应第一章：概述&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.imgdb.cn/item/66bb0c38d9c307b7e9a13390.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.im</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络-1</title>
    <link href="https://zix1a.github.io/posts/6b13d18b.html"/>
    <id>https://zix1a.github.io/posts/6b13d18b.html</id>
    <published>2024-08-13T05:17:28.000Z</published>
    <updated>2024-08-13T07:12:29.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对应第一章：概述">对应第一章：概述</h3><p>看的是湖南科技大学网课。</p><p><img src="https://pic.imgdb.cn/item/66baee94d9c307b7e97543e4.png" alt="1"></p><p><img src="https://pic.imgdb.cn/item/66baef18d9c307b7e975b847.png" alt="2"></p><p><img src="https://pic.imgdb.cn/item/66baf425d9c307b7e97aa9b7.png" alt=""></p><p>国内的isp主要指电信、联通、移动三家公司。</p><p><img src="https://pic.imgdb.cn/item/66baf468d9c307b7e97af376.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66baf47ad9c307b7e97b038f.png" alt=""></p><p>比特流是指由比特（二进制位）组成的数据流，它是计算机中处理和传输数据的最基本形式。比特流由0和1两种二进制数字组成，用来表示数据、指令或控制信息。比特流通常是以电信号或电磁波的形式在计算机网络中传输，以便在不同的计算机和设备之间进行数据交换。</p><p><img src="https://pic.imgdb.cn/item/66baf8ebd9c307b7e985460e.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66baf8d2d9c307b7e984ff23.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66baf8c0d9c307b7e984cd1e.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66baf8acd9c307b7e9848b0a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bafba8d9c307b7e9894480.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bafb7bd9c307b7e9891ace.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb0301d9c307b7e990851a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb0314d9c307b7e9909929.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb037cd9c307b7e990fd5a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb0355d9c307b7e990d44b.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb036bd9c307b7e990ec33.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb02e3d9c307b7e9906659.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb02cbd9c307b7e9904e4d.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb0740d9c307b7e99ad53a.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb072cd9c307b7e99aa115.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb071ed9c307b7e99a74bb.png" alt=""></p><p><img src="https://pic.imgdb.cn/item/66bb0706d9c307b7e99a4a79.png" alt=""></p><p>学了好多知识点~</p><p>过几天再来复习</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对应第一章：概述&quot;&gt;对应第一章：概述&lt;/h3&gt;
&lt;p&gt;看的是湖南科技大学网课。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.imgdb.cn/item/66baee94d9c307b7e97543e4.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;im</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>操作系统linux笔记-2</title>
    <link href="https://zix1a.github.io/posts/33eb152c.html"/>
    <id>https://zix1a.github.io/posts/33eb152c.html</id>
    <published>2024-08-13T05:04:56.000Z</published>
    <updated>2024-08-13T06:57:27.555Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>操作系统linux笔记-1</title>
    <link href="https://zix1a.github.io/posts/3c9b1af4.html"/>
    <id>https://zix1a.github.io/posts/3c9b1af4.html</id>
    <published>2024-08-01T15:51:50.000Z</published>
    <updated>2024-08-13T06:56:53.197Z</updated>
    
    <content type="html"><![CDATA[<p>8月1日晚，</p><p>此时正在听着lovesick girls伴奏，写着笔记~</p><p>此时樊振东正在奥运会上打比赛^_^</p><p>本文说的虚拟机不是指vmware这个平台，而是“一台装有linux的虚拟计算机”。</p><h2 id="ip地址">ip地址</h2><p>ip地址分为私有ip和公网ip。</p><p>网络分为局域网和广域网。</p><p>公网ip：不需要任何映射和转换。</p><p>私有ip：相当于12幢901，未知小区。</p><p>端口映射：几台计算机公用8.8.8.8这一个ip，会编号为：8.8.8.8:1000 ; 8.8.8.8:1100 <a href="http://xn--ip192-fq1hz1tyqetvwem1aef9afsb380algp144bwdo.168.xxx">而这几台计算机的真实ip为192.168.xxx</a><br>这个过程称为ip的端口映射。</p><h4 id="ipv4">ipv4</h4><p>4*8位二进制数，对应4个0~255的十进制数，成为192.168.0.1</p><h4 id="ipv8">ipv8</h4><h2 id="网络连接的3种模式">网络连接的3种模式</h2><h4 id="桥接模式">桥接模式</h4><p>相当于一台真的计算机，具有和真计算机平行的ip地址，但容易造成ip冲突。</p><h4 id="NAT模式">NAT模式</h4><p>主机真正ip：192.168.0.50</p><p>主机内部ip：192.168.100.99</p><p>虚拟机ip：192.168.100.88</p><p>网络地址转换模式，相当于代理，不造成ip冲突。</p><h4 id="主机模式">主机模式</h4><p>独立的系统，和外界无关。</p><h2 id="虚拟机克隆">虚拟机克隆</h2><p>方法1：直接copy整个文件夹，然后用vmware打开。</p><p>方法2：vmware里的克隆操作。克隆时要先关闭linux系统。</p><p>右击虚拟机→管理→克隆→创建完整克隆</p><h2 id="虚拟机快照">虚拟机快照</h2><p>异常时的时间回溯，相当于海诺大招。</p><p>右击虚拟机→快照→拍摄快照</p><p>右击虚拟机→快照→快照管理器→转到</p><h2 id="虚拟机迁移和删除">虚拟机迁移和删除</h2><p>虚拟机的本质是文件夹里的文件，迁移和删除就是把整个文件夹拷贝或删除。</p><h2 id="vmtools">vmtools</h2><p>设置windows和centos/ubuntu的共享文件夹。</p><h2 id="linux的目录结构">linux的目录结构</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;8月1日晚，&lt;/p&gt;
&lt;p&gt;此时正在听着lovesick girls伴奏，写着笔记~&lt;/p&gt;
&lt;p&gt;此时樊振东正在奥运会上打比赛^_^&lt;/p&gt;
&lt;p&gt;本文说的虚拟机不是指vmware这个平台，而是“一台装有linux的虚拟计算机”。&lt;/p&gt;
&lt;h2 id=&quot;ip地址&quot;&gt;ip</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>想做的事</title>
    <link href="https://zix1a.github.io/posts/cb503a50.html"/>
    <id>https://zix1a.github.io/posts/cb503a50.html</id>
    <published>2024-07-31T11:20:06.000Z</published>
    <updated>2024-07-31T11:26:59.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="暑假">暑假</h2><div class='checkbox'><input type="checkbox" />            <p>把小屋建的更精美，主要指功能拓展</p>            </div><div class='checkbox'><input type="checkbox" />            <p>玩linux</p>            </div><div class='checkbox'><input type="checkbox" />            <p>保持良好的饮食，少吃零食和夜宵</p>            </div><div class='checkbox'><input type="checkbox" />            <p>每天去上跳舞课</p>            </div><div class='checkbox'><input type="checkbox" />            <p>拿下驾照</p>            </div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;暑假&quot;&gt;暑假&lt;/h2&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;checkbox&quot; /&gt;
            &lt;p&gt;把小屋建的更精美，主要指功能拓展&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;check</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux安装心得</title>
    <link href="https://zix1a.github.io/posts/6c8738e3.html"/>
    <id>https://zix1a.github.io/posts/6c8738e3.html</id>
    <published>2024-07-31T10:30:08.000Z</published>
    <updated>2024-07-31T11:14:35.493Z</updated>
    
    <content type="html"><![CDATA[<p>linux安装的成功与否，究其根本，不过是一句话：看您的计算机是垮个批脸还是龙颜大悦。</p><p>HgFP：我安装虚拟机失败，放弃了，然后才用的windows linux子系统。</p><p>我：恰恰相反，先装windows linux子系统，弄了好久，最后登录闪退的问题解决不了，放弃了，去尝试虚拟机，没想到非常顺利。</p><p>如图是我尝试装子系统：<br><img src="https://pic.imgdb.cn/item/66aa147dd9c307b7e92a4b47.png" alt=""></p><p>现在不用了，但删也删不掉，只能留在电脑里了：<br><img src="https://pic.imgdb.cn/item/66aa1c85d9c307b7e931c531.png" alt=""></p><p>最后在虚拟机上安装了ubuntu，大功告成！<br>vmware主流的下载方法是在百度网盘上下，辣鸡百度网盘要下载9h，而它的同行阿里云盘秒了它，仅仅用了10min就biubiu光速下好！！<br>如图是ubuntu界面，里面竟然自带扫雷和国际象棋哈哈哈哈哈<br><img src="https://pic.imgdb.cn/item/66aa143ed9c307b7e92a1809.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;linux安装的成功与否，究其根本，不过是一句话：看您的计算机是垮个批脸还是龙颜大悦。&lt;/p&gt;
&lt;p&gt;HgFP：我安装虚拟机失败，放弃了，然后才用的windows linux子系统。&lt;/p&gt;
&lt;p&gt;我：恰恰相反，先装windows linux子系统，弄了好久，最后登录闪退的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>butterfly+markdown语法</title>
    <link href="https://zix1a.github.io/posts/c12cf4b2.html"/>
    <id>https://zix1a.github.io/posts/c12cf4b2.html</id>
    <published>2024-07-31T04:49:37.000Z</published>
    <updated>2024-07-31T10:50:12.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装插件">安装插件</h2><p>在vscode中安装如图所示插件：<br><img src="https://pic.imgdb.cn/item/66a9b667d9c307b7e9d3ff0e.png" alt="1"></p><p>查看markdown书写效果：用vscode打开md文件，空白处右击鼠标，“命令面板”，输入“Markdown: Open Preview to the Side”，打开侧边预览。<br>在预览框中右击鼠标还提供了各种导出功能。</p><p>基础markdown参考<a href="https://www.runoob.com/markdown/md-advance.html">菜鸟教程</a>。</p><h2 id="代码块">代码块</h2><p>片段：单反引号</p><p><code>printf()</code> 函数</p><p>区块：三反引号+语言</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="多级标题">多级标题</h2><p>几个井号就是几级标题。</p><h2 id="文字样式">文字样式</h2><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><h2 id="分割线">分割线</h2><p><code>---</code>或<code>***</code></p><hr><h2 id="区块层次嵌套">区块层次嵌套</h2><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想<br>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块引用</span></span><br><span class="line"><span class="quote">&gt; 菜鸟教程</span></span><br><span class="line"><span class="quote">&gt; 学的不仅是技术更是梦想</span></span><br><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure><h2 id="链接">链接</h2><p>这是一个链接 <a href="https://www.runoob.com">菜鸟教程</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [<span class="string">菜鸟教程</span>](<span class="link">https://www.runoob.com</span>)</span><br></pre></td></tr></table></figure><h2 id="图片">图片</h2><p><img src="https://pic.imgdb.cn/item/66a881c3d9c307b7e9dba61a.jpg" alt="丹尼尔"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">丹尼尔</span>](<span class="link">https://pic.imgdb.cn/item/66a881c3d9c307b7e9dba61a.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="表格">表格</h2><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table><h2 id="公式">公式</h2><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><h2 id="动态标签">动态标签</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip [参数，可选]"><p>文本内容</p></div><p>仅展示一种，更多种效果见 <a href="https://www.fomal.cc/posts/2013454d.html">参考文章</a>（后文也是）。</p><h2 id="分栏">分栏</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="折叠框">折叠框</h2><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装插件&quot;&gt;安装插件&lt;/h2&gt;
&lt;p&gt;在vscode中安装如图所示插件：&lt;br&gt;
&lt;img src=&quot;https://pic.imgdb.cn/item/66a9b667d9c307b7e9d3ff0e.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;查看markdow</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客制作总结</title>
    <link href="https://zix1a.github.io/posts/4f35bc.html"/>
    <id>https://zix1a.github.io/posts/4f35bc.html</id>
    <published>2024-07-30T05:27:46.000Z</published>
    <updated>2024-07-30T07:26:35.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>博客雏形使用的是hexo+butterfly，仓库部署在github上，服务器也是用github。<br>特别致谢大佬fomalhaut的开源模版，点进我的通讯录即可进入他的主页。<br><img src="https://pic.imgdb.cn/item/66a88ee0d9c307b7e9e6fd3d.png" alt="fomalhaut"></p><h2 id="butterfly定制版markdown"><a href="#butterfly定制版markdown" class="headerlink" title="butterfly定制版markdown"></a>butterfly定制版markdown</h2><p>这里仅写出与常规markdown不同的地方。</p><p>参考文章：<a href="https://www.fomal.cc/posts/2013454d.html">markdown语法与外挂标签写法</a></p><p><a href="https://akilar.top/posts/615e2dec/">外挂标签插件</a></p><p>本来想在这里写，但写着写着发现太多了，之后我会专门出一篇笔记写butterfly+markdown语法。</p><h2 id="上传改动"><a href="#上传改动" class="headerlink" title="上传改动"></a>上传改动</h2><p>在根目录下打开git bash，依次<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo <span class="selector-tag">g</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> “hello world”</span><br></pre></td></tr></table></figure><p>在根目录\source\posts里查看。</p><h2 id="图片转化成web链接"><a href="#图片转化成web链接" class="headerlink" title="图片转化成web链接"></a>图片转化成web链接</h2><p>笔者第一次傻不拉几地把本地图片后缀名改成.webp，这是错的！推荐一个免费转换网站： <a href="https://www.superbed.cn/">点击这里</a></p><h2 id="修改页尾布局（footer）"><a href="#修改页尾布局（footer）" class="headerlink" title="修改页尾布局（footer）"></a>修改页尾布局（footer）</h2><p>根目录\themes\butterfly\layout\includes\footer.pug</p><h2 id="修改各专栏内容"><a href="#修改各专栏内容" class="headerlink" title="修改各专栏内容"></a>修改各专栏内容</h2><p>根目录\source</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>很多版块尚未开发，等以后来补全~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在最前面&quot;&gt;&lt;a href=&quot;#写在最前面&quot; class=&quot;headerlink&quot; title=&quot;写在最前面&quot;&gt;&lt;/a&gt;写在最前面&lt;/h2&gt;&lt;p&gt;博客雏形使用的是hexo+butterfly，仓库部署在github上，服务器也是用github。&lt;br&gt;特别致谢大</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="https://zix1a.github.io/posts/d4a1185.html"/>
    <id>https://zix1a.github.io/posts/d4a1185.html</id>
    <published>2024-07-29T08:18:56.000Z</published>
    <updated>2024-07-30T07:27:12.783Z</updated>
    
    <content type="html"><![CDATA[<p>2024年7月29日，历经多次失败（主题不兼容、无法部署到github等问题）之后，我的小屋终于建设好啦！现在我激动地写下这句经典开局语：</p><h1 id="HELLO-WORLD-！"><a href="#HELLO-WORLD-！" class="headerlink" title="HELLO WORLD ！"></a>HELLO WORLD ！</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024年7月29日，历经多次失败（主题不兼容、无法部署到github等问题）之后，我的小屋终于建设好啦！现在我激动地写下这句经典开局语：&lt;/p&gt;
&lt;h1 id=&quot;HELLO-WORLD-！&quot;&gt;&lt;a href=&quot;#HELLO-WORLD-！&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
</feed>
